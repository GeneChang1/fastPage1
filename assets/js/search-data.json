{
  
    
        "post0": {
            "title": "Variables, Assignments, and Data Abstraction",
            "content": "Variables . A variable is an abstraction inside a program that can hold a value | It organizes data by labeling it with a descriptive name | It consists of three parts: name, value, and type | Using meaningful variables names helps with readability of program code and understanding of what values are represented by the variables | . Naming Variables . Do&#39;s Don&#39;ts Why . highScore | highestScoreInTheGame | Keep it simple and easy to read, having variables that are too complicated can cause your code to become messy later on | . highScore | highscore | Differentiate the words in your variable with a capital letter. Makes things easier to read | . firstName | n | not specific enough/vague | . isRaining | is it raining | spaces are improper syntax | . phoneNumber | 555-number | dashes are improper syntax and numbers should be avoided in variable names | . Types of data Integer: A number | Text/string: A word | Boolean: Data that determines if something is true or false | . | . name = &quot;table1&quot; #string print(name, type(name)) number = 4 #integer print(number, type(number)) isAbsent = False print(isAbsent, type(isAbsent)) . table1 &lt;class &#39;str&#39;&gt; 4 &lt;class &#39;int&#39;&gt; False &lt;class &#39;bool&#39;&gt; . A list of data can also be stored in variables. Why is that useful? . print/retrieve specific values in the list without creating a lot of variables | easily remove/add/change items into the list | . colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;] print(colors[2]) . yellow . Assignments . The assignment operator allows a program to change the value represented by a variable | Used to assigning values to variables | . Operator Description Syntax Outcome when print(a) . = | Assign value of right side of expression to left side operand | a = b | b | . += | Add right side operand with left side operand and then assign to left operand | a += b | a + b | . -= | Subtract right operand from left operand and then assign to left operand: True if both operands are equal | a -= b | a - b | . *= | Multiply right operand with left operand and then assign to left operand | a *= b | a * b | . /= | Divide left operand with right operand and then assign to left operand | a /= b | a / b | . **= | Calculate exponent(raise power) value using operands and assign value to left operand | a **= b | a ^ b | . a = 1 b = 2 a = b print(a) . The value stored in a variable will be the most recent value assigned . a = 1 b = a a = 2 print(b) . 1 . Changing Values . currentScore = 10 highScore = currentScore currentScore = 7 print(currentScore) . 7 . your turn! Here are 3 problems for you to solve . num1 = 5 num2 = 9 num1 = num2 print(num1) print(num2) #will print 9 and 9 because number 1 is now number 2: 9. print(num2 + num1) . 9 9 18 . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) #Will print 42, 42, and 15 respectively because number 1 is number 3 and number 2 then is number 1. . 42 42 15 . Which of these will show the sum? . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) #number 2 . 42 84 4284 126 . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | Provides a separation between the abstract properties of a data type and the concrete details of its representation | . Lists &amp; Strings . List = ordered sequence of elements | Element = individual value in a list that is assigned to a unique index | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String = ordered sequence of characters (Letters, numbers, special characters) . Note: index starts at 1 for AP Exam, must be whole numbers, cannot be negative, and goes up to the number of elements in the list We can represent a list or string using a variable . | . Example of a List - Colors . Index Element . 1 | Green | . 2 | Blue | . 3 | Purple | . 4 | Pink | . At Index 1, the element is green, at index 2, the element is blue, etc. | . Managing the Complexity of a Program through Data Abstraction . Data abstractions help manage complexity in programs by giving a collection of data a name without referencing the specific details of the representation | Developing a data abstraction to use in a program can result in a program that is easier to develop and maintain | . Using Lists as Data Abstractions . What are Lists? . Allow for data abstraction | Bundle variables together | Store multiple elements | Allows multiple related items to be treated as a single value | Give one name to a set of memory cells | Can keep adding elements to it as needed | Can store elements as a single variable by using a list | . 3 Types of List Operations . Assigning values to a list at certain indices | Creating an empty list and assigning it to a variable | Assigning a copy of one list to another list (setting one list equal to another list) | 1. Assigning values to a list at certain indices . colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) . [&#39;pink&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;orange&#39;] . 2. Creating an empty list and assigning it to a variable . colorsList=[] # can be used if you want to create a list that can be filled with values later . 3. Assigning a copy of one list to another list (setting one list equal to another list) . # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) # reverse 1st . [&#39;black&#39;, &#39;blue&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;purple&#39;, &#39;green&#39;, &#39;pink&#39;] . What is Managing Complexity? . Improving code readability | Reducing the need for new variables as more data is collected | Can easily update data | Can easily convert data to different forms | . How do Lists Help Manage the Complexity of a Program? . Don’t need as many variables | Can easily change the number of variables | Can apply the same mathematical computation (through an algorithm) to all the elements in the list | . Data Abstraction Practice . Manage the complexity of the given code below using a list. Re-write the code segment in a less complex way, but with the same result. . color1=&quot;green&quot; color2=&quot;red&quot; color3=&quot;pink&quot; color4=&quot;purple&quot; color5=&quot;blue&quot; color6=&quot;brown&quot; print(color1) print(color2) print(color3) print(color4) print(color5) print(color6) . green red pink purple blue brown . Answer . colors=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] for i in range(len(colors)): print(colors[i]) . green red pink purple blue brown . AP Exam Use of Data Abstraction . With the properties of the AP Exam pseudocode, lists work differently from what we&#39;ve learned in python so far, here are the two major differences: . The index does not start at 0 but 1 | There is only one method of interchanging data between lists, and that is completely overwriting previous list data with the other list n&quot;, | . Homework . You will turn in a program that utilizes lists and variables as it&#39;s primary function, options could be a quiz, a sorter, database, or wherever your imagination brings you. You will be graded on how well you understood the concepts and if you used anything other than just the simplest parts . Quiz template, if you do use it, fix the issues, and add more to it than it&#39;s current barebones state. I would recommend using it to create something related to school. . score = 0 quesCount = 0 quesList = [&quot;What is the largest Country?&quot;, &quot;Is Toby Leeder cool&quot;, &quot;What is the exponent given to the tenth in a mole?&quot;, &quot;Is the Dash&quot;] # Use a dictionary for the correct solutions soluList = [&quot;Russia&quot;, &quot;No&quot;, &quot;23&quot;, &quot;Yes&quot;] for i in quesList: answer= input(i + &quot; Your answer?&quot;) if answer == soluList[quesCount]: score += 1 quesCount += 1 else: print(&quot;your score is:&quot; + str(score) + &quot; or&quot; + &quot; &quot; + str(score/len(quesList)*100) + &quot;%&quot;) . your score is:4 or 100.0% .",
            "url": "https://genechang1.github.io/fastPage1/lectures/:NewCategory/",
            "relUrl": "/lectures/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "MarkDown Table",
            "content": "Period 1 2 3 4 5 . Class | AP Physics C | AP Calc BC | APCSP | APEL | APUSH | . print(&quot;Yes&quot;) . Yes .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Guest Speaker",
            "content": "Speaker Event: 12/13/2022 . 2 guests from Qualcomm: Kathyleen Beveridge, Kris Porter | . Overall insights . Software engineering and tech as a whole is a massive industry with many avenues of success and opportunity. | Both Kathyleen and Kris shows how many routes one can take in the journey to proficiency. | Grades and things don&#39;t matter much; more so experience and innovation. | . Kathyleen . Journey into software and tech | Born in Vietnam | California 1980 | 2004 Bay Area | Studying abroad in Spain was very transformative | Looks forward to next cool place in the planet | Master&#39;s degree from USC (MBA) &amp; Bachelor&#39;s in Finance (non traditional) | Mission Statement: &quot;My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.&quot; - Maya Angelou | Finance: was an investment banker | HP, Qualcomm, ThermoFisher scientific worked in | Learned how to surf in San Diego | Felt that tech was her calling and future | The big tech companies have a global impact on people&#39;s lives example: qualcomm chips in 99% of smartphones, 1 billion people lives impacted by qualcomm tech | . | 125K employees, 7k scientists, $1.5B, $40B ThermoFisher | The process is similar to our own Commericalizing product | Roles in team | Trying to get what customers want | Design phase | Release | Consult the scrum master to release to the market | . | Frontend and Backend developers help make the whole process work | . HP . Mission statement: Create technology that makes lif better for everyone, everywhere | . Qualcomm . Inventing the technology the world loves | . ThermoFisher . Enable our customers to make the world healthier, cleaner, and safer | . ALl . Working to help customers lives and create new technology | . Kris . Works in SRE, DevOps, Infrastructure | Took a bunch of math/physics classes in high school | Went to UCLA for electrical engineering for bachelors and masters Allowed him to go into his first CS class but didn&#39;t do so well | . | Did research in the internet of things in undergraduate and graduate Embedded Networked Sensors to get biological reading with AI | Caused him to learn about linux which is good | . | Graduated from Grad School but nobody was hiring due to economic depression :( | Took many different jobs until reaching an email marketing automation start First big experience with devops and redunancy/security | Then worked at NBCUniversal with their first streaming platform | . | Also worked with some geofencing on phones to see if they are near stores After company wasn&#39;t doing well, moved over to qualcomm with a lot of devops | . | Two years ago started working in twitter which is really big tech with a huge site and graphql Got services and information from users &amp; got extensive training | At there he did continious learning which is key to always be learning new thing | . | Worked on streaming, analytics, financial systems/banking, twitter data centers, graphql component of the data center. All helped people visualize and understand data about the | Rest API to graphql | . | Soon going to start working at a Web3 infrastructure company | For doing AI tensorflow and ai is used | In twitter used custom web frameworks as well as monorepo which combines everything in one repo | . Q &amp; A . Do you have any experience with agile methodology? Technically, different companies have their own versions of &quot;agile&quot; | There is organization in order to coordinate all the employees to reach goals | &quot;Sprints&quot; are a key concept to do things in 1-3 months vs 6-12 months | . | Do you still work at Twitter (Kris)? No, moved on but looked for jobs as soon as Twitter acquisition possible | Good decision as whenever mergers or acquisitions happen layoffs are possible | . | How do you think AI can be used? Can be used to predict when to turn off servers or when demand will be low | Key to see where the customers are and predict what to sell | . | What are important skills to have in the tech industry? Two important skills that are continous learning (learn how to learn), don&#39;t be scared of risk/take advantage of learning opportunity | Other skills is to be adaptable to whatever jobs or what life throws at you, and being able to listen/to translate to technology/speeaking to non technical people | . | How do interviews work? They give you a short time to code something and it should compile with no errors | Use your negotiating leverage in the fact that tech companies are in demand (a lot of companies force you to work a lot but be careful so you don&#39;t get exploited) | . | How are you judged in the professional scene? Judged for explaining process and problem solving | Ex. &quot;How many tennis balls in the United States?&quot;, what is your thought process | . | What are you planning on doing in the future? Blockchain technology, AWS, companies with their own data centers | . | How does coding help with investment and finance? Machine learning and data storage to better service people | Stocks and automated options for finance. | . | .",
            "url": "https://genechang1.github.io/fastPage1/lessons/:NewCategory/",
            "relUrl": "/lessons/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python RapidAPI",
            "content": "import requests from IPython.display import Markdown as md url = &quot;https://imdb8.p.rapidapi.com/auto-complete&quot; querystring = {&quot;q&quot;:&quot;Chris Pratt&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;72b85464fcmsh525da0513109f2cp1d08fejsn081a3095bf66&quot;, &quot;X-RapidAPI-Host&quot;: &quot;imdb8.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) querystring = {&quot;nconst&quot;:&quot;nm5927244&quot;} prattsearch = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) prattImage = prattsearch.json().get(&quot;image&quot;).get(&quot;url&quot;) print(&quot;Here is the link to the image of toby you see below: &quot; + tobyImage) . {&#34;d&#34;:[{&#34;i&#34;:{&#34;height&#34;:2048,&#34;imageUrl&#34;:&#34;https://m.media-amazon.com/images/M/MV5BZjdkYjg1NzMtOTY2YS00ZWI1LWEwZWYtOTU1YTM2ODA2ZWY5XkEyXkFqcGdeQXVyMTM1MjAxMDc3._V1_.jpg&#34;,&#34;width&#34;:1536},&#34;id&#34;:&#34;nm0695435&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:113,&#34;s&#34;:&#34;Actor, Guardians of the Galaxy (2014)&#34;},{&#34;id&#34;:&#34;nm9985479&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:92249,&#34;s&#34;:&#34;Actor, Christopher Robin (2018)&#34;},{&#34;id&#34;:&#34;nm2212645&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:168083,&#34;s&#34;:&#34;Actor, Motorcycle (2006)&#34;},{&#34;id&#34;:&#34;nm8802752&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:431449},{&#34;i&#34;:{&#34;height&#34;:800,&#34;imageUrl&#34;:&#34;https://m.media-amazon.com/images/M/MV5BZWE4MTEyM2YtOGNhNS00NmZkLWI1NjktNzlmZDcxZjM1ODc2XkEyXkFqcGdeQXVyMTA3NzIyMDM0._V1_.jpg&#34;,&#34;width&#34;:800},&#34;id&#34;:&#34;nm7947770&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:535176,&#34;s&#34;:&#34;Music Department, Deviant Love (2019)&#34;},{&#34;id&#34;:&#34;tt6667532&#34;,&#34;l&#34;:&#34;Passengers: On the Set with Chris Pratt&#34;,&#34;q&#34;:&#34;video&#34;,&#34;qid&#34;:&#34;video&#34;,&#34;rank&#34;:677160,&#34;s&#34;:&#34;Chris Pratt, Greg Baxter&#34;,&#34;y&#34;:2017},{&#34;i&#34;:{&#34;height&#34;:1489,&#34;imageUrl&#34;:&#34;https://m.media-amazon.com/images/M/MV5BZjU2NjFhNDQtNzZkMS00NzIxLTllNTAtODEzNzBmOGJhNmZhXkEyXkFqcGdeQXVyMjQ0NzE0MQ@@._V1_.jpg&#34;,&#34;width&#34;:1169},&#34;id&#34;:&#34;tt5301518&#34;,&#34;l&#34;:&#34;Jurassic World: Innovation Center Tour with Chris Pratt&#34;,&#34;q&#34;:&#34;video&#34;,&#34;qid&#34;:&#34;video&#34;,&#34;rank&#34;:502130,&#34;s&#34;:&#34;Chris Pratt, Colin Trevorrow&#34;,&#34;y&#34;:2015},{&#34;id&#34;:&#34;nm9972450&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:1173487,&#34;s&#34;:&#34;Costume Department, Auto (2017)&#34;}],&#34;q&#34;:&#34;chris%20pratt&#34;,&#34;v&#34;:1} . JSONDecodeError Traceback (most recent call last) File ~/Library/Python/3.8/lib/python/site-packages/requests/models.py:971, in Response.json(self, **kwargs) 970 try: --&gt; 971 return complexjson.loads(self.text, **kwargs) 972 except JSONDecodeError as e: 973 # Catch JSON-related errors and raise as requests.JSONDecodeError 974 # This aliases json.JSONDecodeError and simplejson.JSONDecodeError File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:357, in loads(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw) 354 if (cls is None and object_hook is None and 355 parse_int is None and parse_float is None and 356 parse_constant is None and object_pairs_hook is None and not kw): --&gt; 357 return _default_decoder.decode(s) 358 if cls is None: File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:337, in JSONDecoder.decode(self, s, _w) 333 &#34;&#34;&#34;Return the Python representation of ``s`` (a ``str`` instance 334 containing a JSON document). 335 336 &#34;&#34;&#34; --&gt; 337 obj, end = self.raw_decode(s, idx=_w(s, 0).end()) 338 end = _w(s, end).end() File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:355, in JSONDecoder.raw_decode(self, s, idx) 354 except StopIteration as err: --&gt; 355 raise JSONDecodeError(&#34;Expecting value&#34;, s, err.value) from None 356 return obj, end JSONDecodeError: Expecting value: line 1 column 1 (char 0) During handling of the above exception, another exception occurred: JSONDecodeError Traceback (most recent call last) /Users/genechang/fastPage1/_notebooks/helpme.ipynb Cell 2 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; querystring = {&#34;nconst&#34;:&#34;nm5927244&#34;} &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; prattsearch = requests.request(&#34;GET&#34;, url, headers=headers, params=querystring) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; tobyImage = prattsearch.json().get(&#34;image&#34;).get(&#34;url&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; print(&#34;Here is the link to the image of toby you see below: &#34; + tobyImage) File ~/Library/Python/3.8/lib/python/site-packages/requests/models.py:975, in Response.json(self, **kwargs) 971 return complexjson.loads(self.text, **kwargs) 972 except JSONDecodeError as e: 973 # Catch JSON-related errors and raise as requests.JSONDecodeError 974 # This aliases json.JSONDecodeError and simplejson.JSONDecodeError --&gt; 975 raise RequestsJSONDecodeError(e.msg, e.doc, e.pos) JSONDecodeError: Expecting value: line 1 column 1 (char 0) .",
            "url": "https://genechang1.github.io/fastPage1/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "CollegeBoard",
            "content": "Week Posts . 10 | | Vocab, Procedures | . 11 | | Vocab, Sections 12-13 | . 12 | | . Collaboration Quiz . Score:3/3- This quiz was particularly easy, the large idea was more abstract and subjective. Because of this, the quiz offered basic, almost common sense. The quiz offered insights into the benefits of having a dynamic and diverse team, along with the benefits of communication and cohesion between teammates. Because of this, it offered a good leeway into the actual content of the lessons ahead. . Program Function and Purpose Quiz . Score:6/6- The quiz was kind of convoluted and made difficult for the sake of being difficult. The code was not optimized at all but in the end simple. It was also in this weird scratch/code.org type of style that made it hard to think through the code. It would have been easier with the base code instead of the weird blocky objects. . Program Design and Development Quiz . Score:3/3- Collegeboard seems to start at index 1 instead of index 0, which offered some confusion. Other than that, the 3 question quiz was pretty straightforward. . CollegeBoard Final Exam . Score 47/50 . The final test was relatively easy compared to the coding done in our final project for Night At the Museum. In terms of vocabulary and study, it was easy for us to understand most of what collegeboard was talking about. Working as a group, we were able to discuss our answers with each other, which helped with collaboration and thinking. However, there were some questions that we had increased dialogue in:&gt; Question 27 - This question was about what data could be represented with binary code. | This one confused us at first because most things in their intermediate forms are impossible to store in binary, but we realized that all data is eventually stored as binary, so we picked D Question 17 | This question was about open protocols | This confused us because most of us didn&#39;t know what an open protocol was, but Nathan remembered the definition and it was smooth sailing from there. | . Question 18 . This question was about the world wide web | This one was just a general miscommunication about the web that was sorted and marked correct. | . Question 16 . The question was about packets | Same as above, mostly. | . Incorrect Questions:&gt;3/50 were incorrect . Question 43 . We got this wrong because we did the calculation incorrectly | . Question 49 . We got this incorrect because we did not follow the logic of the question | . Question 50 . As Above | . Night At The Museum . I stayed for only a few minutes at the night at the museum because of scheduling issues. I presented the project to Mr. Mortenson but that was the extent of what I did there. I couldn&#39;t take a picture because of the hectic atmosphere, but my friends can say I was there. Overall, Night At the Museum was fun to experience and it was cool seeing the projects taking place, like minefield. | . What I learned from this class . APIS . APIs are a form a interdevice communication that can serve useful for all types of projects. | It basically takes data from a database and stores it within a server, which then any code can pull from. | This was especially useful for us during the final project because of the amount of data and information we had to store. | I learned fetch requests, the get() command, and the fetch() command from this. | I&#39;m also proud of learning how to make a .py file in order to set up the database and API. | I also learnt how to make a calculator using this, which helped me get my grades at any time. | I stayed for only a few minutes at the night at the museum because of scheduling issues. I presented the project to Mr. Mortenson but that was the extent of what I did there. I couldn&#39;t take a picture because of the hectic atmosphere, but my friends can say I was there. Overall, Night At the Museum was fun to experience and it was cool seeing the projects taking place, like minefield. | . from flask import Blueprint, jsonify from flask_restful import Api, Resource import requests # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api2 = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/chess&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api2) data = { &quot;turn&quot;: 0, &quot;moves&quot;: [&quot;move1&quot;, &quot;move2&quot;] } class ChessAPI: class _GetAll(Resource): def get(self): return jsonify(data) class _putTurn(Resource): def put(self): data[&quot;turn&quot;] += 1 return jsonify(data) class _putMove1(Resource): def put(self, move1): data[&quot;moves&quot;][0] = move1 return jsonify(data) class _putMove2(Resource): def put(self, move2): data[&quot;moves&quot;][1] = move2 return jsonify(data) api.add_resource(_GetAll, &#39;/&#39;) api.add_resource(_putTurn, &#39;/turn/&#39;) api.add_resource(_putMove1, &#39;/move1/&lt;string:move1&gt;&#39;) api.add_resource(_putMove2, &#39;/move2/&lt;string:move2&gt;&#39;) if __name__ == &quot;__main__&quot;: #server = &quot;http://127.0.0.1:5000&quot; #local server = &#39;https://tngc.nighthawkcodescrums.gq&#39; #web url = server + &quot;/api/chess&quot; . from flask import render_template # import render_template from &quot;public&quot; flask libraries # import &quot;packages&quot; from &quot;this&quot; project from __init__ import app # Definitions initialization from chess import app_api2 # Blueprint import api definition from bp_projects.projects import app_projects # Blueprint directory import projects definition app.register_blueprint(app_api2) # register api routes app.register_blueprint(app_projects) # register api routes @app.errorhandler(404) # catch for URL not found def page_not_found(e): # note that we set the 404 status explicitly return render_template(&#39;404.html&#39;), 404 @app.route(&#39;/&#39;) # connects default URL to index() function def index(): return render_template(&quot;index.html&quot;) @app.route(&#39;/stub/&#39;) # connects /stub/ URL to stub() function def stub(): return render_template(&quot;stub.html&quot;) @app.route(&#39;/team/&#39;) # connects /team/ URL to team() function def team(): return render_template(&quot;team.html&quot;) @app.route(&#39;/chess/&#39;) # connects /team/ URL to chess() function def chess(): return render_template(&quot;chess.html&quot;) # this runs the application on the development server if __name__ == &quot;__main__&quot;: app.run(debug=True) . Variables, Assignments, and Data Abstraction . A variable is an abstraction inside a program that can hold a value . I learned about variables and how to cocatonate and combine from pseudocode in this unit. It was interesting to see how variables and values could be stored within names and catagories. It was easy to understand and the lecture was pretty straightforward. | . Mathematical Expressions and Strings . Having a plan is essential . Learned about basic arithmetic operations and planning these as such. Learned about order of operation and it&#39;s impact on code. It&#39;s kind of dumb how collegeboard does it though:with 1 as the beginning of a list or any other such expression. | . Booleans and conditionals . True is false and false is true . One can compare lists and make code with this, new information. | . VOCAB DEF . | . Vocabulary . Else: when the condition does not meet, do statement() | Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | For: used in loops to meet a condition | While: used to set a condition - indefinite | Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. | . import random randomNumber = random.randint(1,2) price = random.randint(1, 100) if (randomNumber==1): expired = True elif (randomNumber == 20): expired = True else: break for i in list: # for &quot;This is iterable&quot; [&quot;This&quot;, &quot;is&quot;, &quot;also&quot;] . Binary . Bits: Single pieces of data (either 1 or 0) to store data (ex. 11 = 3) . | Bytes: 8 bits of information. . | Hexadecimal: system that uses 16 data stores instead of 8 . | Nibbles: 4, instead of 8 . Binary Numbers:- Unsigned Integer: Number value assigned in bits. It does not include negative or positive. (5) . | Signed Integer: Number value WITH negative and positive (-5) . | Floating Point: decimals! allows one to add decimals. (5.32) . | Boolean: True or False, 1 or 0. . | ASCII: Binary to Characters . | Unicode: Another character encoding standard. Builds on ASCII . | RGB: Red Green Blue, shown through hexidecimal. #FF0000 (255, 0, 0) . | . Variables, Data Types, Assignment Operators . Variables: a way to store data, can be divided into type. ex 1, &quot;Gene&quot; . | String concatination: adding strings together: ex &quot;Hello&quot; + &quot;my&quot; . | Data Types: Ways of assigning types to variables and data. Boolean (T/F), Integer (5), Float (2.5354), Char: A. String (&quot;Hello&quot;) . | Lists: A list of values shown by []. (ex. [&quot;hi&quot;, &quot;hello&quot;]) . | Assignment: assigning a value to a variable. num = 1 . | 2D Lists: An array, lists inside lists. . | Dictionaries: A list, with values. Each item has a key. ex {&quot;hello&quot;:1} . | Class: blueprint for an example. . | iteration: repeating a thing multiple times . | When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | . Else: when the condition does not meet, do statement() | Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | For: used in loops to meet a condition | While: used to set a condition - indefinite | Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . | parameters: conditions that must be met . | Upper/Lower | . TwoDList = [[1, 2, 3],[4, 5, 6],[7, 8 ,9]] word = &quot;Hello&quot; print(word) div = 23 floac = 3.52 # Using a for loop and range() list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] dictionary = {&quot;Toby&quot;:3, &quot;Gene&quot;:1, &quot;Dash&quot;: 2} # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) # string concat greeting = &quot;hello&quot; + &quot;my&quot; + &quot;name&quot; a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . Procedures . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as methods or functions, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . import random numList = [] number = 0 for i in range(3): numList.append(random.randint(1, 20)) print(&quot;Number&quot;, str(i+1),&quot;is &quot;, str(numList[i])) if(numList[i] &gt; number): number = numList[i] print(str(number)) . Algorithms . Algorithms, Sequence, Selection, Iteration Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings Python For, While loops with Range, with List Procedural Abstraction, Python Def procedures, Parameters, Return Values . hello = (&quot;hello&quot;).upper() print(hello) hi = (&quot;HI&quot;).lower() print(hi) . HELLO hi .",
            "url": "https://genechang1.github.io/fastPage1/collegeboard/:NewCategory/",
            "relUrl": "/collegeboard/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Java",
            "content": "| some random link . | Link 2 (TBD) . | Link 3 (TBD) . | Link 4 (TBD) . | . . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . console.log(&quot;Hello, World! My name is Geane!&quot;); . Hello, World! My name is Gene! . console.log output showing use of variable . var msg = &quot;Hello, World! This is another message&quot;; console.log(msg); . Hello, World! This is another message . console.log output showing use of a function . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! This is another message . Showing reuse of a function . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;HELLO PEOPLE!&quot;); logIt(20258729837579) . Reuse of logIT HELLO PEOPLE! 20258729837579 . Dynamic or Loosely typed language (string, number) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;This is a string&quot;); // String logItType(39539); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; This is a string number ; 39539 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined var student = new Person(&quot;Gene&quot;, &quot;Chflasnk&quot;, 2024); // object type is easy to work with in JavaScript logItType(student); // before role logItType(student.toJSON()); // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); student.setRole(&quot;Student&quot;); // set the role logItType(student); logItType(student.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Gene&#39;, ghID: &#39;Chflasnk&#39;, classOf: 2024, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Gene&#34;,&#34;ghID&#34;:&#34;Chflasnk&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; Person { name: &#39;Gene&#39;, ghID: &#39;Chflasnk&#39;, classOf: 2024, role: &#39;Student&#39; } string ; {&#34;name&#34;:&#34;Gene&#34;,&#34;ghID&#34;:&#34;Chflasnk&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Student&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . var students = [ new Person(&quot;Gene&quot;, &quot;GeneChang1&quot;, 2024), new Person(&quot;Nathan&quot;, &quot;NathanielCapule&quot;, 2024), new Person(&quot;Caleb&quot;, &quot;Cydro&quot;, 2024), new Person(&quot;Toby&quot;, &quot;TobyLeeder&quot;, 2024), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Gene&#39;, ghID: &#39;GeneChang1&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nathan&#39;, ghID: &#39;NathanielCapule&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Caleb&#39;, ghID: &#39;Cydro&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Toby&#39;, ghID: &#39;TobyLeeder&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Gene | GeneChang1 | 2024 | Student | Nathan | NathanielCapule | 2024 | Student | Caleb | Cydro | 2024 | Student | Toby | TobyLeeder | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://genechang1.github.io/fastPage1/java/:NewCategory/",
            "relUrl": "/java/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Student Copy Of Bridge To Bc Pacing (fall 2022)",
            "content": "Week Monday Tuesday Wednesday Thursday Friday . 0 | August 15 | 16 | First Day of School 17 | 18 | 19 | . | | | Welcome to AP Calculus BC! . Unit 1 HW 1: . Read Finding the Glory in the Struggle and Post Reflection to Canvas Discussion Board (Discussion Closes 11:59 pm 8/21/2022) . *Classes about 51 minutes . | Begin Unit 1: Functions and Limits . 1.1: Domain . 2.2: An Intro to the Limit of a Function . Notes Template . Class Notes . Unit 1 HW 2: . p. 12 1.1: #9, 17, 23-29 . p. 102 2.2: #5, 10, 12, 23 . Worked Out Solutions . | 1.1: Absolute Value . 2.3: Calculating Limits Using the Limit Laws . Notes Template . Class Notes . Unit 1 HW 3: . p. 14 1.1: # 41, 64, 67 . p. 114 2.3: # 7-9, 11, 19, 25, 34, 36, 41 . Worked Out Solutions . | . 1 | 22 | 23 | 24 | 25 | 26 | . | 2.3: Squeeze Theorem . 3.5: Limits of Trigonometric Functions . Notes Template . Class Notes . Unit 1 HW 4: . p. 115 2.3: # 48, 50, 52 . p. 224 3.5: #29-37 . Worked Out Solutions . | 2.4: Limits at Infinity and Horizontal Asymptotes . Notes Template . Class Notes . Unit 1 HW 5: . p. 128 2.4: #13, 18, 23, 28, 38, 42, 54, 58, 80 . Worked Out Solutions . | 2.5: Continuity . Notes Template . Class Notes . Unit 1 HW 6: . p. 143 2.5: # 32-34, 37, 46, 47, 50, 57 . Worked Out Solutions . AND Squeeze Theorem Fun Worksheet 😊 . Solutions . Print Unit 1 Closure Activity and Bring to Class . | Check for Understanding: . Limits and Intermediate Value Theorem . Peer Review . Unit 1 Closure Activity . Unit 1 HW 7: . Complete Unit 1 Closure Core Problems: . 1.1, 1.3(d-h,j,l,m,o), 2.1, 3.1, 4.2, 4.3, 4.4, 4.5, 5.2 b . Worked Out Solutions . | Begin Unit 2: The Derivative . 3.1 &amp; 3.2: The Derivative . Notes Template . Class Notes . Unit 2 HW 1: . p. 173 3.1: # 4, 14, 15, 28, 59, 61, 75 . p. 188 3.2: # 11, 24, 35, 42, 56, 67 . Worked Out Solutions . | . 2 | 29 | 30 | 31 | September 1 | 2 | . | 3.3 &amp; 3.4: Rules of Differentiation . Class Work: . p. 203 3.3: #84, 92, 101, 106 . p. 213 3.4: #66, 68, 75 . Worked Out Solutions . Unit 2 HW 2: . Finish Class Work . p. 203 3.3: # 44, 49, 81 . p. 213 3.4: #34, 44, 55, 56, 63 . Worked Out Solutions . | 3.5: Derivatives of Trigonometric Functions . Notes Template . Class Notes . Unit 2 HW 3: . p. 223 3.5: # 5, 6, 11, 13, 15, 39, 41, 47, 59, 67 . Worked Out Solutions . | 3.6: The Chain Rule . Chain Rule Fun Worksheet 😊 . Unit 2 HW 4: . Finish Chain Rule Fun Worksheet 😊 . Worked Out Solutions . | Test 1 . Functions, Limits, Continuity, and Rates of Change . | 3.7: Implicit Differentiation and Derivatives of Inverse Functions . Notes Template . Class Notes 1/Class Notes 2 . Unit 2 HW 5: . p. 248 3.7: #22, 36, 55, 69, 102, 104, 108, 112, 113 AND . Inverse Functions Fun Worksheet 😊 #7, 10, 13 . Worked Out Solutions (Text) . Worked Out Solutions (Worksheet) . | . 3 | Labor Day September 5 | 6 | 7 | 8 | 9 | . | Holiday - No School 😊 | 3.7: Inverse Trigonometric Functions and Their Derivatives . Notes Template . Class Notes . Unit 2 HW 6: . p. 248 3.7: #41-48, 68, 70-72 . Worked Out Solutions . | 3.8: Derivatives of Logarithmic and Exponential Functions; Logarithmic Differentiation . Notes Template . Class Notes . Unit 2 HW 7: . p. 259 3.8: #18, 28, 31, 33, 41, 44, 47, 52, 68, 72, 76 . Worked Out Solutions . Print Unit 2 Closure Activity and Bring to Class . | Check for Understanding: Derivatives . Differentiability, Inverse Functions &amp; Derivatives (Table/Graph), &amp; Logarithmic Differentiation . Unit 2 Closure Activity . Unit 2 HW 8: . Unit 2 Closure Learning Targets 1.1, 1.3, 2.1, 3.1, 3.2, 4.1, 5.1 . | Peer Review . Unit 2 Closure Activity . Unit 2 HW 9: . Complete Unit 2 Closure . Learning Targets 4.2 (a-h, l), 7.1, 8.1, 8.2 . Worked Out Solutions - Don’t Peek Too Soon!!! . | . Week Monday Tuesday Wednesday Thursday Friday . 4 | 12 | Back to School Night 13 | 14 | 15 | 16 | . | Begin Unit 3 . 3.9: Applications of the Derivative . Rectilinear Motion Screencast . Notes Template . Class Notes . Unit 3 HW 1: . p. 270 3.9: #1, 5, 8, 22 . Worked Out Solutions . Watch Related Rates Screencast and Use Notes Template to Take Notes . | 3.10: Related Rates . Related Rates Fun Worksheet☺ . Unit 3 HW 2: . Related Rates Fun Wksht 😊 . Worked Out Solutions . | 3.11: Local Linearity . Notes Powerpoint . Unit 3 HW 3: . p. 285 3.11 #6, 12, 17, 19-22 . Worked Out Solutions . | Test 2 . Functions, Limits, and Differentiation . | 4.1: Maximum and Minimum Values (Relative) . Notes Template . Class Notes . Unit 3 HW 4: . p. 303 4.1 #35, 40, 49, 72, . 79(skip part d), 91 . Worked Out Solutions . Watch Extreme Value Theorem and Absolute Extrema Screencast and Use Notes Template to Take Notes . | . 5 | Professional Development 19 | 20 | 21 | 22 | 23 | . | No School for Students | 4.1: Maximum and Minimum Values (Absolute) . Class Work: . p. 303 4.1 #10, 12, 16, 18, 44, 48, 50, 62, 65, 66, 68, 70, 71, 80, 81, 88 . Unit 3 HW 5: . Finish Classwork . Worked Out Solutions . | 4.2: Mean Value Theorem . Notes Template . Class Notes . Unit 3 HW 6: . p. 313 4.2 #1, 5, 11, 13, 15, 19, 29, 30, 35, 46 . Worked Out Solutions . | 4.3: How Derivatives Affect the Shape of a Graph . 4.5: Summary of Curve Sketching . Notes Template . Class Notes . Unit 3 HW 7: . Function Analysis &amp; Curve Sketching Fun Worksheet 😊 . #1, 2 (c only), 4, 5, 6, 8, 10 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . Applications of the Derivative . | Function Analysis . | . Peer Review . Unit 3 HW 8: . Watch Optimization Screencast &amp; Use Notes Template to Take Notes . p. 374 4.6 #1, 5 (find MAXIMUM), 9, 13, 18 . Worked Out Solutions . | . 6 | 26 | 27 | 28 | 29 | End of 1st 6-Weeks 30 | . | 4.6: Optimization Problems . Class Work: . p. 374 4.6 #7, 14, 15, 20, 22, 25, 27, 34, 42, 46, 49 . *Core Problems highlighted in yellow . Unit 3 HW 9: . Finish Classwork . Print Unit 3 Closure Activity and Bring to Class . Worked Out Solutions . | Unit 3 Closure Activity . Unit 3 HW 10A: . Unit 3 Closure Activity . Learning Targets 1.1, 2.1, 3.1, 3.2, 3.3, 4.1 . Solutions Part I . | Unit 3 Closure Activity . Unit 3 HW 10B: . Unit 3 Closure Activity . Learning Targets: 4.2, 4.3, 5.1, 6.1, 6.2 . Solutions Part II . Optional: Extra Practice Fun Worksheet #1a, 2-4, 6 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . MVT . | Related Rates . | Optimization . | . Peer Review . Begin Unit 4: Integration . 5.1: Antiderivatives . Notes Powerpoint . Unit 4 HW 1: . p. 392 5.1 #19, 21, 22, 26, 28, 41, 46, 56, 58, 63, 74 . Worked Out Solutions . | 5.2: Riemann Sums . Notes Template . Class Notes . Unit 4 HW 2: . p. 410 5.2 #9, 15, 16, 21-23, 32, 33 . Worked Out Solutions . | . 7 | October 3 | Grades Due/Tri 1 Conferences 4 | 5 | Parent Conferences 6 | Homecoming Parade 7 | . | 5.2: Area as a Limit . Notes Template . Class Notes . Unit 4 HW 3: . p. 410 5.2 #34, 36, 38-40, 42, 43, 44 . Worked Out Solutions . | 5.3: The Definite Integral . Notes Template . Class Notes . Unit 4 HW 4: . p. 428 5.3 #27, 29, 32, 41, 43, 47, 53, 60, 67 . Worked Out Solutions . *Classes about 46 minutes . | Test 3 FR . Functions, Limits, Differentiation, Applications of Differentiation . HW: . No Homework ☺ . | Test 3 MC . Functions, Limits, Differentiation, Applications of Differentiation . *Classes about 46 minutes . | 5.4: The Fundamental Theorem of Calculus . Notes Template . Class Notes . Unit 4 HW 6: . p. 441 5.4 #7, 11, 17, 23, 27, 33, 36, 43, 49, 50, 55, 68, 79 . Worked Out Solutions . *Classes about 67 minutes . | . Week Monday Tuesday Wednesday Thursday Friday . 8 | 10 | 11 | 12 | 13 | 14 | . | 5.4: The Fundamental Theorem of Calculus . Unit 4 HW 7: . Fundamental Theorem of Calculus Fun Worksheet 😊 . Worked Out Solutions . | 5.5: Indefinite Integrals . Notes PowerPoint . Unit 4 HW 8: . p. 454 5.5 #16, 20, 22, 36, 42, 45, 58, 60, 62, 66, 68, 70, 75, 77, 82 . Worked Out Solutions . | 5.6: Method of Substitution . Notes Template . Class Notes . Unit 4 HW 9: . p. 467 5.6 #22, 26, 28, 31, 33, 42, 52, 54, 67, 72, 73, 77, 84 . Worked Out Solutions . | Check for Understanding: Integration . Limit Definition of Definite Integral . | Fundamental Theorem of Calculus . | . Extra Practice . Functions Defined as Definite Integrals Worksheet . Unit 4 HW 10: . Finish Classwork . Worked Out Solutions (Ignore #1) . | Peer Review . Extra Practice . Riemann Sum to Definite Integral . Integration . Unit 4 HW 11: . Riemann Sum to Definite Integral Fun Wksht (All) AND Integration Fun Wksht 😊 #7, 11, 13, 14, 15, 16, 20 AND Print Unit 4 Closure Activity and Bring to Class . Worked Out Solutions 1 . Worked Out Solutions 2 . | . 9 | 17 | 18 | 19 | 20 | 21 | . | Unit 4 Closure Activity . Unit 4 HW 12: . Complete Unit 4 Closure Activity . Core Problems: . 1.2, 1.4, 2.1, 3.1 (a&amp;c), 4.1, 4.2(c), 5.1, 5.3(b), 5.4, 6.1, 6.2, 6.6,7.1, 7.2(c), 7.3(c), 8.1, 8.2 . Worked Out Solutions . | Begin Unit 5: Applications of Integration . 6.1: Area Between Curves . Notes Template . Class Notes . Unit 5 HW 1: . p. 486 6.1 #6, 8, 15, 32, 47, 58, 60, 66, 67, 72 . Worked Out Solutions . | 6.2: Average Value of a Function . Notes PowerPoint . Unit 5 HW 2: . p. 494 6.2 #9, 10, 14, 15, 18, 20, 21, 23, 24, 26, 32 . Worked Out Solutions . | Test 4 . Integration . HW: . See 10/19/2022 . | 6.3: The Definite Integral as an Accumulation Function . Notes PowerPoint . Unit 5 HW 3: . p. 505 6.3 #8, 12, 13, 14, 15, 20, 21, 26, 27 . Worked Out Solutions . | . 10 | 24 | 25 | 26 | 27 | 28 | . | 6.4: Rectilinear Motion Revisited . Notes Template . Class Notes . Unit 5 HW 4: . p. 515 6.4 #15, 17, 24, 26, 28, 34 . Worked Out Solutions . | 6.5: Volume (Known Cross Sections) . Notes Template . Class Notes . Unit 5 HW 5: . Volume of Solids with Known Cross Sections Fun Worksheet 😊 . Worked Out Solutions . | 6.5: Volume (Disks and Washers) . Notes Template . Class Notes . PowerPoint . Reference Questions . Unit 5 HW 6: . p. 528 6.5 #22, 25, 31, 32, 39, 40, 52, 58, 62 . Solutions . | 6.5: Volume (Cylindrical Shells) . Notes Template . Class Notes . Unit 5 HW 7: . p. A28 Appendix D #7, 10, 13, 16, 19, 22, 28, 31, 48 . Worked Out Solutions . | 6.6: Arc Length . Notes Template . Class Notes . Unit 5 HW 8: . Area, Volume, and Arc Length Fun Worksheet 😊 . Worked Out Solutions . Print Unit 5 Closure Activity and Bring to Class . | . 11 | Professional Development 31 | November 1 | 2 | 3 | 4 | . | No School for Students | Unit 5 Closure Activity . Unit 5 HW 9: . Complete Unit 5 Closure Activity . Worked Out Solutions . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . Worked Out Solutions . | Final Part 1: FR . Application of the Definite Integral . HW: . Trimester I Review Fun Worksheet ☺ . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | . 12 | 7 | 8 | 9 | 10 | Veteran’s Day 11 | . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | AM: Trimester I Review . PM: Trimester I Final Exam . Multiple Choice . Period 5 . HW: . Study and prepare for Final Exam . | Trimester I Final Exam . Multiple Choice . Periods 1 &amp; 2 . | Trimester I Final Exam . Multiple Choice . Periods 3 &amp; 4 . Notes Template for Monday, Nov. 14 . | Holiday – No School 😊 | .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Nathan's Magnificent Quiz",
            "content": "score = [] scoresDict = {&quot;import&quot;:10, &quot;if&quot;:20, &quot;expression&quot;:30} for keys in scoresDict.keys(): answer1 = input(&quot;What command is used to include other functions that were previously developed?&quot;) if answer1 == &quot;import&quot;: score.append(scoresDict[&quot;import&quot;]) else: print(&quot;Incorrect!&quot;) answer2 = input(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if answer2 == &quot;if&quot;: score.append(scoresDict[&quot;if&quot;]) else: print(&quot;Incorrect!&quot;) answer3 = input(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if answer3 == &quot;expression&quot;: score.append(scoresDict[&quot;expression&quot;]) else: print(&quot;Incorrect!&quot;) print(&quot;Your score is&quot;, sum(score)) . Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! . KeyboardInterrupt Traceback (most recent call last) /Users/genechang/fastPage1/_notebooks/Quiz.ipynb Cell 2 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print(&#34;Incorrect!&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; answer2 = input(&#34;What command is used to evaluate correct or incorrect response in this example?&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if answer2 == &#34;if&#34;: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; score.append(scoresDict[&#34;if&#34;]) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1177, in Kernel.raw_input(self, prompt) 1173 if not self._allow_stdin: 1174 raise StdinNotImplementedError( 1175 &#34;raw_input was called, but this frontend does not support input requests.&#34; 1176 ) -&gt; 1177 return self._input_request( 1178 str(prompt), 1179 self._parent_ident[&#34;shell&#34;], 1180 self.get_parent(&#34;shell&#34;), 1181 password=False, 1182 ) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1187, in Kernel._input_request(self, prompt, ident, parent, password) 1184 def _input_request(self, prompt, ident, parent, password=False): 1185 # Flush output before making the request. 1186 sys.stderr.flush() -&gt; 1187 sys.stdout.flush() 1189 # flush the stdin socket, to purge stale replies 1190 while True: File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:478, in OutStream.flush(self) 476 # wait for flush to actually get through, if we can. 477 evt = threading.Event() --&gt; 478 self.pub_thread.schedule(evt.set) 479 # and give a timeout to avoid 480 if not evt.wait(self.flush_timeout): 481 # write directly to __stderr__ instead of warning because 482 # if this is happening sys.stderr may be the problem. File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:210, in IOPubThread.schedule(self, f) 208 self._events.append(f) 209 # wake event thread (message content is ignored) --&gt; 210 self._event_pipe.send(b&#34;&#34;) 211 else: 212 f() File ~/Library/Python/3.8/lib/python/site-packages/zmq/sugar/socket.py:618, in Socket.send(self, data, flags, copy, track, routing_id, group) 611 data = zmq.Frame( 612 data, 613 track=track, 614 copy=copy or None, 615 copy_threshold=self.copy_threshold, 616 ) 617 data.group = group --&gt; 618 return super().send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:740, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:787, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:244, in zmq.backend.cython.socket._send_copy() File ~/Library/Python/3.8/lib/python/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . (I spammed it too much -_-) . You could also do as such: . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print (&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, genechang running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 3 questions. Are you ready to take a test? Question: What command is used to include other functions that were previously developed? . A few alternatives to making a quiz: . # scoresDict = {&quot;Vatican City&quot;:200, &quot;Okazaki&quot;:400, &quot;Gandalf&quot;:100, &quot;Asia&quot;:200} # answer1 = input(&quot;What is the smallest country?&quot;).capitalize() # if answer1 == &quot;Vatican City&quot;: # score.append(scoresDict[&quot;Vatican City&quot;]) # else: # score.append(score - 100) # print(&quot;Your score is&quot;, score[0]) # answer2 = input(&quot;What are the fragments of DNA in replication called?&quot;).capitalize() # if answer1 == &quot;Okazaki&quot;: # score.append(score[0] + scoresDict[&quot;Okazaki&quot;]) # score.pop(0) # else: # score.append(score[0] - 100) # score.pop(0) # print(&quot;Your score is&quot;, score[0]) . # answer = (input(&quot;What is the secret word? &quot;)).capitalize() guesses = 5 # while guesses &gt; 0: # answer = (input(&quot;What is the word? &quot;)).capitalize() # if answer == secretWord: # print (&quot;You win!&quot;) # break # else: # print (&quot;You lose, try again!&quot;) # guesses -= 1 # else: # print(&quot;Game over&quot;) # # Store a number inside a variable (lucky number) # # Get the user&#39;s favorite number and store it # # Check if the user has the same facorite number as you # luckyNumber = 7 # answer = int(input(&quot;What do you think the lucky number is?&quot;)) # if answer &gt; luckyNumber: # print(&quot;Too high!&quot;) # elif answer &lt; luckyNumber: # print(&quot;Too low!&quot;) # else: # print(&quot;Good job!&quot;) .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Psychology and the Good Life",
            "content": "",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "3.16 Lesson",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . ValueError Traceback (most recent call last) /Users/genechang/fastPage1/_notebooks/2022-12-12-Simulations.ipynb Cell 7 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/2022-12-12-Simulations.ipynb#W6sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; height = float(input(&#34;height in meters?&#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/2022-12-12-Simulations.ipynb#W6sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; weight = input(&#34;weight in pounds?&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/2022-12-12-Simulations.ipynb#W6sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; stuff = (2 * (height / 9.8))**(1/2) ValueError: could not convert string to float: &#39;&#39; . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation . import random import turtle .",
            "url": "https://genechang1.github.io/fastPage1/lesson/:NewCategory/",
            "relUrl": "/lesson/:NewCategory/",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as methods or functions, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputing the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temp): celsius = temp - 32 celsius *= 5/9 return celsius outsideTemp = 44 convertFahrenheit(outsideTemp) . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . def replaceGrade(Grade, newGrade): if Grade &lt; newGrade: currentGrade = newGrade return Grade replaceGrade(30, 90) . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def calculate(): operation = input(&quot;Please type in the math operation you would like to complete:&quot;) number1 = int(input(&#39;Please enter the first number: &#39;)) number2 = int(input(&#39;Please enter the second number: &#39;)) if operation == &#39;+&#39;: print(&#39;{} + {} = &#39;.format(number1, number2)) print(number1 + number2) elif operation == &#39;-&#39;: print(&#39;{} - {} = &#39;.format(number1, number2)) print(number1 - number2) elif operation == &#39;*&#39;: print(&#39;{} * {} = &#39;.format(number1, number2)) print(number1 * number2) elif operation == &#39;/&#39;: print(&#39;{} / {} = &#39;.format(number1, number2)) print(number1 / number2) else: print(&#39;What&#39;) again() def again(): calc_again = input(&#39;&#39;&#39; Again? Please type Y for YES or N for NO. &#39;&#39;&#39;) if calc_again.upper() == &#39;Y&#39;: calculate() elif calc_again.upper() == &#39;N&#39;: print(&#39;Okay&#39;) else: again() calculate() . 5 + 4 = 9 See you later. .",
            "url": "https://genechang1.github.io/fastPage1/lessons/:NewCategory/",
            "relUrl": "/lessons/:NewCategory/",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3 Sections 9-11",
            "content": "First Things First: WGET . wget allows you to essentially clone someone elses file on Github into a directory of your choosing You are able to edit your own copy of the file without affecting the original | . | . Here&#39;s a quick how-to . Open your VSCode terminal (Terminal &gt; New Terminal) . | Navigate to your Fastpages Blog using cd . | Navigate to the _notebooks directory in your Fastpages . | Copy and paste this into the terminal: . | You&#39;re all set! you can use this copy of our notebook to help you take notes and participate during the lesson . Please raise your hand if you are having trouble with wget and we will come around and help you | . | Note: if you have a separate notebook that you take notes on and you also want to do your practice in that notebook, you can copy and paste cells from this notebook by left clicking next to any markdown or code cell (indicating that it is selected), do ctl+c or cmd+c, and go to the desired notebook and do ctl+v or cmd+v (if that doesn&#39;t work, try just c and v with no ctl or cmd) | . 3.9 Part 1 . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use to solve the same problem. . | . Example 1 | What happens if we test the algorithm with different outputs? . The pseudocode above is translated to python for you. . Record what your outputs are when you enter 95 degrees F, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice?v # Conditionals change the output # Bro it&#39;s too hot go inside . It is too cold outside! . import random temp = random.randint(1, 100) print(&quot;it&#39;s&quot;, temp, &quot;degrees outside&quot;) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? . it&#39;s 67 degrees outside Sure I will play outside! . NOW RECORD with another output . Record what your outputs are when you enter 54, does the algorithm yield the same result this time? . *Now use 95 as an input for the two code blocks above. . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Exercise . Learning how to utilize conditionals and booleans are important for developing algorithms. Use this exercise to help you. . Can either Boolean expression on the right replace the conditional on the left? Assume isWeekday and isHoliday are Boolean variables. . *NOTE = you can edit the variables to check the conditions needed! . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = False else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . True . Logically thinking about conditionals and booleans . Now the problem may seem confusing, but the best way to develop an algorithm is to think about all the possible results that can be potentially be outputted. . So if IsHoliday is set to true, then driveWork is automatically equal to false and it does not matter what value of isWeekday is. This must mean that one of the conditionals must be NOT IsHoliday. . In the case that lets say IsHoliday is set to false, then the variable for weekday needs to be checked. If it&#39;s true then driveWork is true, if it&#39;s false then driveWork is false. This must mean that the other conditional isWeekday. . Combining both conditionals, you get option 2, which is not IsHoliday and IsWeekday. This is why option 2 is right! . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . Below, I have translated the block code into python, import this to your jupyter notebook and record the result. What do you notice? . First block . sum = 1 counter = 3 for i in range(4): sum = sum =+ counter counter += 2 print(sum) . 25 . Second block . sum = 0 counter = 9 while not (counter &lt; 1): sum += counter sum -= 2 print(sum) . When we start our initializing left sum as 1 counter as 3 we had no iterations yet. Remember we&#39;re going to have to repeat this four times because the block code prompts us to repeat 4 times, so we iterate. So as we go through and follow what the block gives us. . So you see that the sum does work, it does sum up the odd numbers from 1-9 . Now lets look at the right block. . Sum is set to 0 Counter is set to 9 We must repeat until the counter &lt; 1 is true. . So we keep adding until -1, that is when the counter &lt; 1 is true, so we stop . So why is it important to understand that algorithms can be written in different ways and still accomplish the same task? . An algorithm is beautiful that way, just because you think of solving a problem differently, doesn&#39;t mean your wrong, . 3.9 Part 2 . Flowcharts . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement | . | determine a way to reach the end goal | Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes . Outcome 1: if the conditional statement is true, something will happen . | Outcome 2: if the conditional statement is false, something else will happen . | Ex: see . | . | . | Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied . Once the condition is satisfied, then an outcome is produced . | This can take the form of a for-loop, while-loop, and/or if-statement . | . | . | . Example A . Consider this situation: . You are shopping for your favorite food at your favorite supermarket . | You see that there is a sale on wheat products for 35% off . | There is another sale on produce for 20% off . | These sales are mutually exclusive . | Tax on all items is 8% . | . | Your TASK: . Create a flowchart for an algorithm that can be used to calculate the cost of your favorite item | . | . Example A Possible Solution (using Selection) . 3.9 Part 3 . For Algorithms How to combine and/or modify an existing algorithm. | . | . Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd) . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) while varx &gt; 1: if (varx %2 == 0): varx /= 2 print(varx) else: varx = (varx * 3) + 1 print(varx) print(varx) # Run this cell to see how it works . choose value for x 16 8.0 4.0 2.0 1.0 1.0 . How can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . steps/rules 2 &amp; 3. | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): varx == varx/2 # Change print to the function else: varx == varx * 3 + 1 # Change print to the function print(varx) . Step 2 . step/rule 4; here we add the loop | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) while varx != 1: if (varx %2 == 0): varx = varx/2 # Change print to the function else: varx = varx * 3 + 1 # Change print to the function print(varx) . Step 3 . Display all values throughout the algorithm | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx = varx/2 print(varx) # add Display else: varx = varx * 3 + 1 print(varx) # add Display print(varx) # Final # Should be 1 every time . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the &quot;collatz conjecture.&quot; and explain your steps in a post on a blog. | . terms = int(input(&quot;Term Value&quot;)) n1, n2 = 0, 1 count = 0 if terms &lt;= 0: print(&quot;Invalid input&quot;) elif terms == 1: print(&quot;Fibonacci sequence when the term is&quot;,terms,&quot; is just:&quot;) print(n1) else: print(&quot;Fibonacci sequence to the&quot;, terms, &quot;terms:&quot;) while count &lt; terms: print(n1) nth = n1 + n2 n1 = n2 n2 = nth count += 1 . Fibonacci sequence to the 10 terms: 0 1 1 2 3 5 8 13 21 34 . 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . (IMAGE HERE) . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . (IMAGE HERE) . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . (IMAGE HERE) . . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . We have created a function called binary_search() function which takes two arguments - a list to be sorted and a number to be searched. . | We have declared two variables to store the lowest and highest values in the list. The lowest is assigned initial value to 0, the highest to len(list1) 1 and mid as 0. . | Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest. The while loop will iterate if the number has not been found yet. . | In the while loop, we find the mid value and compare the index value to the number we are searching for. . | If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to the low. The search moves to the left side. . | Otherwise, if the value of mid index is larger than n, we decrease the mid value by 1 and assign it to the high. The search moves to the right side. . | If the n is equal to the mid value then return mid. . | This will happen until the low is equal and smaller than the high. . | If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function. . | . . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | . Homework Assignment (DUE FRIDAY 12/09 BY 5:00 PM) . Consider this situation: . You&#39;re playing a short game using a random number generator from 1 to 20 . On each turn, a player will generate 3 random numbers . | They get to keep the highest number that they generate as their score . | . | . | . Your TASK: . Create a flowchart that can be used to write an algorithm that calculates a player&#39;s score after a turn . NOTE: Don&#39;t forget the ! (each shape represents an action) . | Try to implement selection and/or iteration in your algorithm . | Please do this using Google Drawing. It can be found in your Google Drive if you click New &gt; More &gt; Google Drawings . | . | Write the working algorithm in Python . Make sure to initialize / define any variables you may need . | Add comments to your code! . | . | How to submit: . Make a shareable link to your Flowchart with commenting access through Google Drive&#39;s &quot;Share&quot; feature . | Make a comment with the link at the top of the code block that holds your algorithm (use # for comments in Python) . | Submit a link to your algorithm (with the commented link to Flowchart) in the comment/issue found on the schedule . | Grading . DUE FRIDAY 12/09 BY 5:00 PM . | LATE PENALTY: -0.2 . | You will be graded based on: . how functional your algorithm is . | how well your Flowchart is organized . | . | . If something comes up, feel free to DM us on Slack . import random numList = [] number = 0 for i in range(3): numList.append(random.randint(1, 20)) print(&quot;Number&quot;, str(i+1),&quot;is &quot;, str(numList[i])) if(numList[i] &gt; number): number = numList[i] print(str(number)) . Number 1 is 7 Number 2 is 9 Number 3 is 5 9 .",
            "url": "https://genechang1.github.io/fastPage1/lessonse/:NewCategory/",
            "relUrl": "/lessonse/:NewCategory/",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Teaching Plan",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false dadadad ## Boolean and Binary So similar yet so different. | Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . A few ways these operators could be used... | . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 gradeTot = 90 + 65 + 60 + 75 + 95 gradeBalls = gradeTot/5 &gt; 80 print(gradeBalls) . False . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,1,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: False [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;,) # Output TRUE using OR ^ print(1 &gt; 2 or 5 &lt;12) # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;,) print(not 24&gt;8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;,) print(1&gt;20 and 2&lt;50 and False) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 150 num2 = 50 sum = num1 + num2 if sum == 200: print(sum) else: print(&quot;&gt;:(&quot;) . 200 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90); { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | Hacks Assignments: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . import random # Feel free to use JS or Python - we won&#39;t discriminate whilst grading you! # Here is a python template for you to use. randomNumber = random.randint(1,2) price = random.randint(1, 100) if (randomNumber==1): expired = True else: expired = False if (expired): print(&quot;this product is no good&quot;) pastDue = &quot;expired&quot; else: pastDue = &quot;not expired&quot; if (price &gt; 50): print(&quot;this product is too expensive&quot;) elif(price &gt; 25): print(&quot;this is a regular product&quot;) else: print(&quot;this is a cheap product&quot;) print(&quot;Your product is &quot; + str(price) + &quot;$ and is &quot; + pastDue) . this product is too expensive Your product is 83$ and is not expired . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . score = 0 questionNum = 0 incorrectAnswers = [] questions = [&quot;What is the smallest country in the world? San Marino, Vatican, Kiribati, Russia&quot;, &quot;The natural number is represented by by... a, i, g, e&quot;, &quot;Hawking radiation attempts to bridge the gap between... two sources of water, black holes and particle decay, general relativity and quantum theory, nuclear radiation and thermodynamics&quot;, &quot;Mr Liao is the teacher of... AP physics, AP human geography, AP chemistry, AP biology&quot;] solutions = [&quot;b&quot;, &quot;d&quot;, &quot;c&quot;, &quot;a&quot;] for i in questions: answer = input(i + &quot; A, B, C, D&quot;) if answer.lower() == solutions[questionNum]: score += 1 questionNum += 1 else: print(&quot;incorrect, try again next time!&quot;) incorrectAnswers.append(answer + i) percentGrade = score/len(questions)*100 #diwhfiahiwfihiwihfiwihfihwfiwifhiwhfih # hi print(&quot;You got a: &quot; + str(score) + &quot;/4&quot; + &quot; That&#39;s a &quot; + str(percentGrade) +&quot;%&quot;) for i in range(len(incorrectAnswers)): print(&quot;Furthermore, you got answers &quot; + str(questions.index(incorrectAnswers[i][1:]) + 1)+ &quot; incorrect&quot;) . incorrect, try again next time! incorrect, try again next time! You got a: 2/4 That&#39;s a 50.0% Furthermore, you got answers3incorrect Furthermore, you got answers4incorrect .",
            "url": "https://genechang1.github.io/fastPage1/booln/:NewCategory/",
            "relUrl": "/booln/:NewCategory/",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "wget https://raw.githubusercontent.com/aidenhuynh/CS_Swag/master/_notebooks/2022-11-30-randomvalues.ipynb . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import reprlib import pprint . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random # Fill in the blank def Dice(n): sux = 0 while (n &gt;= 0): sux = sux + random.randint(1,6) n -= 1 return sux def Dice(n): num = 0 while n != 0: rand = random.randint(1, 6) print(rand) num += rand n -= 1 return num Dice(5) # Will output a range of 5 to 35 . 19 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | import numpy import random def balls(n): numeros = [] for i in range(n): numeros.append(random.randint(1, 1000)) numeros.sort() return numeros def sortEvenOdd(n): odds = [] evens = [] for i in balls(n): if i % 2 != 0: odds.append(i) else: evens.append(i) print(odds) print(evens) return print(sortEvenOdd(30)) . [13, 23, 63, 207, 283, 383, 395, 523, 621, 655, 707, 769, 831, 863, 997] [10, 84, 308, 464, 470, 472, 502, 510, 610, 636, 668, 806, 850, 866, 902] None . import random import numpy as np def derivative(fun): return fun.deriv() def pointDerive(fun, point): return derivative(fun)(point) var = np.poly1d([2, 0, 0, -6, 24, 0]) equation2 = np.poly1d([13, 0 , 4, 0, 0])/2 print(derivative(equation2)) print(pointDerive(equation2, 9)) . 3 26 x + 4 x 18990.0 . import random def animalFarm(length): list = [] for i in range(length): wows = 0 nows = 0 for i in list: if i == 1: wows += 1 if i == 2: nows += 1 if wows != length/2 and nows != length/2: newNum = random.randint(1,2) list.append(newNum) elif wows == length/2: list.append(2) elif nows == length/2: list.append(1) return list def animaljungle(length): list = animalFarm(length) finalList = [] for i in list: if i == 1: finalList.append(&quot;dog&quot;) if i == 2: finalList.append(&quot;cat&quot;) return finalList print(animaljungle(30)) . [&#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;] .",
            "url": "https://genechang1.github.io/fastPage1/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Iteration HW",
            "content": "First, what not to do . Iteration is important for your time and sanity . print(&quot;alpha&quot;) print(&quot;bravo&quot;) print(&quot;charlie&quot;) print(&quot;delta&quot;) print(&quot;echo&quot;) print(&quot;foxtrot&quot;) print(&quot;golf&quot;) print(&quot;hotel&quot;) print(&quot;india&quot;) print(&quot;juliett&quot;) print(&quot;kilo&quot;) print(&quot;lima&quot;) print(&quot;mike&quot;) print(&quot;november&quot;) print(&quot;oscar&quot;) print(&quot;papa&quot;) print(&quot;quebec&quot;) print(&quot;romeo&quot;) print(&quot;sierra&quot;) print(&quot;tango&quot;) print(&quot;uniform&quot;) print(&quot;victor&quot;) print(&quot;whiskey&quot;) print(&quot;x-ray&quot;) print(&quot;yankee&quot;) print(&quot;zulu&quot;) #please help me . alpha bravo charlie delta echo foxtrot golf hotel india juliett kilo lima mike november oscar papa quebec romeo sierra tango uniform victor whiskey x-ray yankee zulu . Coding all of these individually takes a lot of unnecessary time, how can we shorten this time? . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . for variable in iterable: statement() . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Using the range() function . But wait, there&#39;s more . Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range() | . x = range(5) for n in x: print(n) . 0 1 2 3 4 . Else, elif, and break . For when 1 statement isn&#39;t enough . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | .",
            "url": "https://genechang1.github.io/fastPage1/iteration/:NewCategory/",
            "relUrl": "/iteration/:NewCategory/",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 #1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 #3 . Multiplication: . Represented by “*” | . num1 = 2 * 1 #2 . Division: . Represented by “/” | . num1 = 2 / 1 #2.0 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 #10 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 print(num5) # - 0.33333 . -0.3333333333333328 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) #10 . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 var = var1 + 5 var2 = var1 - var3 var1 = var2 var3 = (var1 + var2) / 2 var2 = 6 print(var1)#7 print(var2)#6 print(var3)#7.0 . 7 6 7.0 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 print(Result) #Result = 20.4 . 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 print(Result) #Result = 0 . 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) #17 print(valueB)#13 . 17 13 . type = &quot;curly&quot; color = &quot; brown&quot; length = &quot; short&quot; type = &quot; straight&quot; hair = type + color + length + type print(hair) #straight brown short straight . straight brown short straight . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . Noun = &quot;Mr Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[:7] yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; print(yoda) . Very handsome Mr Mort is. . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = cookie + &quot; vote &quot; + str(len2) vote2 = cookie2 + &quot; vote &quot; + str(len1) votes = vote1 + &quot; &quot; + vote2 print(votes) . choclate vote 225 rasin vote 4.0 .",
            "url": "https://genechang1.github.io/fastPage1/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "CollegeBoard",
            "content": "Collaboration Quiz . Score:3/3- This quiz was particularly easy, the large idea was more abstract and subjective. Because of this, the quiz offered basic, almost common sense. The quiz offered insights into the benefits of having a dynamic and diverse team, along with the benefits of communication and cohesion between teammates. Because of this, it offered a good leeway into the actual content of the lessons ahead. . Program Function and Purpose Quiz . Score:6/6- The quiz was kind of convoluted and made difficult for the sake of being difficult. The code was not optimized at all but in the end simple. It was also in this weird scratch/code.org type of style that made it hard to think through the code. It would have been easier with the base code instead of the weird blocky objects. . Program Design and Development Quiz . Score:3/3- Collegeboard seems to start at index 1 instead of index 0, which offered some confusion. Other than that, the 3 question quiz was pretty straightforward. . CollegeBoard Final Exam . Score 47/50 . The final test was relatively easy compared to the coding done in our final project for Night At the Museum. In terms of vocabulary and study, it was easy for us to understand most of what collegeboard was talking about. Working as a group, we were able to discuss our answers with each other, which helped with collaboration and thinking. However, there were some questions that we had increased dialogue in:&gt; Question 27 - This question was about what data could be represented with binary code. | This one confused us at first because most things in their intermediate forms are impossible to store in binary, but we realized that all data is eventually stored as binary, so we picked D Question 17 | This question was about open protocols | This confused us because most of us didn&#39;t know what an open protocol was, but Nathan remembered the definition and it was smooth sailing from there. | . Question 18 . This question was about the world wide web | This one was just a general miscommunication about the web that was sorted and marked correct. | . Question 16 . The question was about packets | Same as above, mostly. | . Incorrect Questions:&gt;3/50 were incorrect . Question 43 . We got this wrong because we did the calculation incorrectly | . Question 49 . We got this incorrect because we did not follow the logic of the question | . Question 50 . As Above | . Night At The Museum . I stayed for only a few minutes at the night at the museum because of scheduling issues. I presented the project to Mr. Mortenson but that was the extent of what I did there. I couldn&#39;t take a picture because of the hectic atmosphere, but my friends can say I was there. Overall, Night At the Museum was fun to experience and it was cool seeing the projects taking place, like minefield. | . What I learned from this class . APIS . APIs are a form a interdevice communication that can serve useful for all types of projects. | It basically takes data from a database and stores it within a server, which then any code can pull from. | This was especially useful for us during the final project because of the amount of data and information we had to store. | I learned fetch requests, the get() command, and the fetch() command from this. | I&#39;m also proud of learning how to make a .py file in order to set up the database and API. | I also learnt how to make a calculator using this, which helped me get my grades at any time. | I stayed for only a few minutes at the night at the museum because of scheduling issues. I presented the project to Mr. Mortenson but that was the extent of what I did there. I couldn&#39;t take a picture because of the hectic atmosphere, but my friends can say I was there. Overall, Night At the Museum was fun to experience and it was cool seeing the projects taking place, like minefield. | . from flask import Blueprint, jsonify from flask_restful import Api, Resource import requests # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api2 = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/chess&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api2) data = { &quot;turn&quot;: 0, &quot;moves&quot;: [&quot;move1&quot;, &quot;move2&quot;] } class ChessAPI: class _GetAll(Resource): def get(self): return jsonify(data) class _putTurn(Resource): def put(self): data[&quot;turn&quot;] += 1 return jsonify(data) class _putMove1(Resource): def put(self, move1): data[&quot;moves&quot;][0] = move1 return jsonify(data) class _putMove2(Resource): def put(self, move2): data[&quot;moves&quot;][1] = move2 return jsonify(data) api.add_resource(_GetAll, &#39;/&#39;) api.add_resource(_putTurn, &#39;/turn/&#39;) api.add_resource(_putMove1, &#39;/move1/&lt;string:move1&gt;&#39;) api.add_resource(_putMove2, &#39;/move2/&lt;string:move2&gt;&#39;) if __name__ == &quot;__main__&quot;: #server = &quot;http://127.0.0.1:5000&quot; #local server = &#39;https://tngc.nighthawkcodescrums.gq&#39; #web url = server + &quot;/api/chess&quot; . from flask import render_template # import render_template from &quot;public&quot; flask libraries # import &quot;packages&quot; from &quot;this&quot; project from __init__ import app # Definitions initialization from chess import app_api2 # Blueprint import api definition from bp_projects.projects import app_projects # Blueprint directory import projects definition app.register_blueprint(app_api2) # register api routes app.register_blueprint(app_projects) # register api routes @app.errorhandler(404) # catch for URL not found def page_not_found(e): # note that we set the 404 status explicitly return render_template(&#39;404.html&#39;), 404 @app.route(&#39;/&#39;) # connects default URL to index() function def index(): return render_template(&quot;index.html&quot;) @app.route(&#39;/stub/&#39;) # connects /stub/ URL to stub() function def stub(): return render_template(&quot;stub.html&quot;) @app.route(&#39;/team/&#39;) # connects /team/ URL to team() function def team(): return render_template(&quot;team.html&quot;) @app.route(&#39;/chess/&#39;) # connects /team/ URL to chess() function def chess(): return render_template(&quot;chess.html&quot;) # this runs the application on the development server if __name__ == &quot;__main__&quot;: app.run(debug=True) . Variables and Integration . A variable is basically | .",
            "url": "https://genechang1.github.io/fastPage1/collegeboard/:NewCategory/",
            "relUrl": "/collegeboard/:NewCategory/",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "CollegeBoard",
            "content": "Collaboration Quiz . Score:3/3- This quiz was particularly easy, the large idea was more abstract and subjective. Because of this, the quiz offered basic, almost common sense. The quiz offered insights into the benefits of having a dynamic and diverse team, along with the benefits of communication and cohesion between teammates. Because of this, it offered a good leeway into the actual content of the lessons ahead. . Program Function and Purpose Quiz . Score:6/6- The quiz was kind of convoluted and made difficult for the sake of being difficult. The code was not optimized at all but in the end simple. It was also in this weird scratch/code.org type of style that made it hard to think through the code. It would have been easier with the base code instead of the weird blocky objects. . Program Design and Development Quiz . Score:3/3- Collegeboard seems to start at index 1 instead of index 0, which offered some confusion. Other than that, the 3 question quiz was pretty straightforward. . CollegeBoard Final Exam . Score 47/50 . The final test was relatively easy compared to the coding done in our final project for Night At the Museum. In terms of vocabulary and study, it was easy for us to understand most of what collegeboard was talking about. Working as a group, we were able to discuss our answers with each other, which helped with collaboration and thinking. However, there were some questions that we had increased dialogue in:&gt; Question 27 - This question was about what data could be represented with binary code. | This one confused us at first because most things in their intermediate forms are impossible to store in binary, but we realized that all data is eventually stored as binary, so we picked D Question 17 | This question was about open protocols | This confused us because most of us didn&#39;t know what an open protocol was, but Nathan remembered the definition and it was smooth sailing from there. | . Question 18 . This question was about the world wide web | This one was just a general miscommunication about the web that was sorted and marked correct. | . Question 16 . The question was about packets | Same as above, mostly. | . Incorrect Questions:&gt;3/50 were incorrect . Question 43 . We got this wrong because we did the calculation incorrectly | . Question 49 . We got this incorrect because we did not follow the logic of the question | . Question 50 . As Above | . Night At The Museum . I stayed for only a few minutes at the night at the museum because of scheduling issues. I presented the project to Mr. Mortenson but that was the extent of what I did there. I couldn&#39;t take a picture because of the hectic atmosphere, but my friends can say I was there. Overall, Night At the Museum was fun to experience and it was cool seeing the projects taking place, like minefield. | . What I learned from this class . APIS . APIs are a form a interdevice communication that can serve useful for all types of projects. | It basically takes data from a database and stores it within a server, which then any code can pull from. | This was especially useful for us during the final project because of the amount of data and information we had to store. | I learned fetch requests, the get() command, and the fetch() command from this. | I&#39;m also proud of learning how to make a .py file in order to set up the database and API. | I also learnt how to make a calculator using this, which helped me get my grades at any time. | I stayed for only a few minutes at the night at the museum because of scheduling issues. I presented the project to Mr. Mortenson but that was the extent of what I did there. I couldn&#39;t take a picture because of the hectic atmosphere, but my friends can say I was there. Overall, Night At the Museum was fun to experience and it was cool seeing the projects taking place, like minefield. | . from flask import Blueprint, jsonify from flask_restful import Api, Resource import requests # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api2 = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/chess&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api2) data = { &quot;turn&quot;: 0, &quot;moves&quot;: [&quot;move1&quot;, &quot;move2&quot;] } class ChessAPI: class _GetAll(Resource): def get(self): return jsonify(data) class _putTurn(Resource): def put(self): data[&quot;turn&quot;] += 1 return jsonify(data) class _putMove1(Resource): def put(self, move1): data[&quot;moves&quot;][0] = move1 return jsonify(data) class _putMove2(Resource): def put(self, move2): data[&quot;moves&quot;][1] = move2 return jsonify(data) api.add_resource(_GetAll, &#39;/&#39;) api.add_resource(_putTurn, &#39;/turn/&#39;) api.add_resource(_putMove1, &#39;/move1/&lt;string:move1&gt;&#39;) api.add_resource(_putMove2, &#39;/move2/&lt;string:move2&gt;&#39;) if __name__ == &quot;__main__&quot;: #server = &quot;http://127.0.0.1:5000&quot; #local server = &#39;https://tngc.nighthawkcodescrums.gq&#39; #web url = server + &quot;/api/chess&quot; . from flask import render_template # import render_template from &quot;public&quot; flask libraries # import &quot;packages&quot; from &quot;this&quot; project from __init__ import app # Definitions initialization from chess import app_api2 # Blueprint import api definition from bp_projects.projects import app_projects # Blueprint directory import projects definition app.register_blueprint(app_api2) # register api routes app.register_blueprint(app_projects) # register api routes @app.errorhandler(404) # catch for URL not found def page_not_found(e): # note that we set the 404 status explicitly return render_template(&#39;404.html&#39;), 404 @app.route(&#39;/&#39;) # connects default URL to index() function def index(): return render_template(&quot;index.html&quot;) @app.route(&#39;/stub/&#39;) # connects /stub/ URL to stub() function def stub(): return render_template(&quot;stub.html&quot;) @app.route(&#39;/team/&#39;) # connects /team/ URL to team() function def team(): return render_template(&quot;team.html&quot;) @app.route(&#39;/chess/&#39;) # connects /team/ URL to chess() function def chess(): return render_template(&quot;chess.html&quot;) # this runs the application on the development server if __name__ == &quot;__main__&quot;: app.run(debug=True) .",
            "url": "https://genechang1.github.io/fastPage1/collegeboard/:NewCategory/",
            "relUrl": "/collegeboard/:NewCategory/",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://genechang1.github.io/fastPage1/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Python RapidAPI",
            "content": "import requests from IPython.display import Markdown as md url = &quot;https://imdb8.p.rapidapi.com/auto-complete&quot; querystring = {&quot;q&quot;:&quot;Chris Pratt&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;72b85464fcmsh525da0513109f2cp1d08fejsn081a3095bf66&quot;, &quot;X-RapidAPI-Host&quot;: &quot;imdb8.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) querystring = {&quot;nconst&quot;:&quot;nm5927244&quot;} prattsearch = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) prattImage = prattsearch.json().get(&quot;image&quot;).get(&quot;url&quot;) print(&quot;Here is the link to the image of toby you see below: &quot; + tobyImage) . {&#34;d&#34;:[{&#34;i&#34;:{&#34;height&#34;:2048,&#34;imageUrl&#34;:&#34;https://m.media-amazon.com/images/M/MV5BZjdkYjg1NzMtOTY2YS00ZWI1LWEwZWYtOTU1YTM2ODA2ZWY5XkEyXkFqcGdeQXVyMTM1MjAxMDc3._V1_.jpg&#34;,&#34;width&#34;:1536},&#34;id&#34;:&#34;nm0695435&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:113,&#34;s&#34;:&#34;Actor, Guardians of the Galaxy (2014)&#34;},{&#34;id&#34;:&#34;nm9985479&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:92249,&#34;s&#34;:&#34;Actor, Christopher Robin (2018)&#34;},{&#34;id&#34;:&#34;nm2212645&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:168083,&#34;s&#34;:&#34;Actor, Motorcycle (2006)&#34;},{&#34;id&#34;:&#34;nm8802752&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:431449},{&#34;i&#34;:{&#34;height&#34;:800,&#34;imageUrl&#34;:&#34;https://m.media-amazon.com/images/M/MV5BZWE4MTEyM2YtOGNhNS00NmZkLWI1NjktNzlmZDcxZjM1ODc2XkEyXkFqcGdeQXVyMTA3NzIyMDM0._V1_.jpg&#34;,&#34;width&#34;:800},&#34;id&#34;:&#34;nm7947770&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:535176,&#34;s&#34;:&#34;Music Department, Deviant Love (2019)&#34;},{&#34;id&#34;:&#34;tt6667532&#34;,&#34;l&#34;:&#34;Passengers: On the Set with Chris Pratt&#34;,&#34;q&#34;:&#34;video&#34;,&#34;qid&#34;:&#34;video&#34;,&#34;rank&#34;:677160,&#34;s&#34;:&#34;Chris Pratt, Greg Baxter&#34;,&#34;y&#34;:2017},{&#34;i&#34;:{&#34;height&#34;:1489,&#34;imageUrl&#34;:&#34;https://m.media-amazon.com/images/M/MV5BZjU2NjFhNDQtNzZkMS00NzIxLTllNTAtODEzNzBmOGJhNmZhXkEyXkFqcGdeQXVyMjQ0NzE0MQ@@._V1_.jpg&#34;,&#34;width&#34;:1169},&#34;id&#34;:&#34;tt5301518&#34;,&#34;l&#34;:&#34;Jurassic World: Innovation Center Tour with Chris Pratt&#34;,&#34;q&#34;:&#34;video&#34;,&#34;qid&#34;:&#34;video&#34;,&#34;rank&#34;:502130,&#34;s&#34;:&#34;Chris Pratt, Colin Trevorrow&#34;,&#34;y&#34;:2015},{&#34;id&#34;:&#34;nm9972450&#34;,&#34;l&#34;:&#34;Chris Pratt&#34;,&#34;rank&#34;:1173487,&#34;s&#34;:&#34;Costume Department, Auto (2017)&#34;}],&#34;q&#34;:&#34;chris%20pratt&#34;,&#34;v&#34;:1} . JSONDecodeError Traceback (most recent call last) File ~/Library/Python/3.8/lib/python/site-packages/requests/models.py:971, in Response.json(self, **kwargs) 970 try: --&gt; 971 return complexjson.loads(self.text, **kwargs) 972 except JSONDecodeError as e: 973 # Catch JSON-related errors and raise as requests.JSONDecodeError 974 # This aliases json.JSONDecodeError and simplejson.JSONDecodeError File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:357, in loads(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw) 354 if (cls is None and object_hook is None and 355 parse_int is None and parse_float is None and 356 parse_constant is None and object_pairs_hook is None and not kw): --&gt; 357 return _default_decoder.decode(s) 358 if cls is None: File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:337, in JSONDecoder.decode(self, s, _w) 333 &#34;&#34;&#34;Return the Python representation of ``s`` (a ``str`` instance 334 containing a JSON document). 335 336 &#34;&#34;&#34; --&gt; 337 obj, end = self.raw_decode(s, idx=_w(s, 0).end()) 338 end = _w(s, end).end() File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:355, in JSONDecoder.raw_decode(self, s, idx) 354 except StopIteration as err: --&gt; 355 raise JSONDecodeError(&#34;Expecting value&#34;, s, err.value) from None 356 return obj, end JSONDecodeError: Expecting value: line 1 column 1 (char 0) During handling of the above exception, another exception occurred: JSONDecodeError Traceback (most recent call last) /Users/genechang/fastPage1/_notebooks/helpme.ipynb Cell 2 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; querystring = {&#34;nconst&#34;:&#34;nm5927244&#34;} &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; prattsearch = requests.request(&#34;GET&#34;, url, headers=headers, params=querystring) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; tobyImage = prattsearch.json().get(&#34;image&#34;).get(&#34;url&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/helpme.ipynb#W1sZmlsZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; print(&#34;Here is the link to the image of toby you see below: &#34; + tobyImage) File ~/Library/Python/3.8/lib/python/site-packages/requests/models.py:975, in Response.json(self, **kwargs) 971 return complexjson.loads(self.text, **kwargs) 972 except JSONDecodeError as e: 973 # Catch JSON-related errors and raise as requests.JSONDecodeError 974 # This aliases json.JSONDecodeError and simplejson.JSONDecodeError --&gt; 975 raise RequestsJSONDecodeError(e.msg, e.doc, e.pos) JSONDecodeError: Expecting value: line 1 column 1 (char 0) .",
            "url": "https://genechang1.github.io/fastPage1/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Java",
            "content": "| some random link . | Link 2 (TBD) . | Link 3 (TBD) . | Link 4 (TBD) . | . . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . console.log(&quot;Hello, World! My name is Geane!&quot;); . Hello, World! My name is Gene! . console.log output showing use of variable . var msg = &quot;Hello, World! This is another message&quot;; console.log(msg); . Hello, World! This is another message . console.log output showing use of a function . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! This is another message . Showing reuse of a function . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;HELLO PEOPLE!&quot;); logIt(20258729837579) . Reuse of logIT HELLO PEOPLE! 20258729837579 . Dynamic or Loosely typed language (string, number) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;This is a string&quot;); // String logItType(39539); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; This is a string number ; 39539 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined var student = new Person(&quot;Gene&quot;, &quot;Chflasnk&quot;, 2024); // object type is easy to work with in JavaScript logItType(student); // before role logItType(student.toJSON()); // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); student.setRole(&quot;Student&quot;); // set the role logItType(student); logItType(student.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Gene&#39;, ghID: &#39;Chflasnk&#39;, classOf: 2024, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Gene&#34;,&#34;ghID&#34;:&#34;Chflasnk&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; Person { name: &#39;Gene&#39;, ghID: &#39;Chflasnk&#39;, classOf: 2024, role: &#39;Student&#39; } string ; {&#34;name&#34;:&#34;Gene&#34;,&#34;ghID&#34;:&#34;Chflasnk&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Student&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . var students = [ new Person(&quot;Gene&quot;, &quot;GeneChang1&quot;, 2024), new Person(&quot;Nathan&quot;, &quot;NathanielCapule&quot;, 2024), new Person(&quot;Caleb&quot;, &quot;Cydro&quot;, 2024), new Person(&quot;Toby&quot;, &quot;TobyLeeder&quot;, 2024), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Gene&#39;, ghID: &#39;GeneChang1&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nathan&#39;, ghID: &#39;NathanielCapule&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Caleb&#39;, ghID: &#39;Cydro&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Toby&#39;, ghID: &#39;TobyLeeder&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Gene | GeneChang1 | 2024 | Student | Nathan | NathanielCapule | 2024 | Student | Caleb | Cydro | 2024 | Student | Toby | TobyLeeder | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://genechang1.github.io/fastPage1/java/:NewCategory/",
            "relUrl": "/java/:NewCategory/",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://genechang1.github.io/fastPage1/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? A | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) # computer starts at 0, need to add 1 to have human order while maintaining computer logic. i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 1 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) odds = [] i = 1 while i &lt;= 20: odds.append(i) i +=2 print(odds) . [0, 2, 4, 6, 8, 10] [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0 or numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} menu2 = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 more = 1 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) total = menu.get(item) while more == 1: item = input(&quot;more? Please select what you want&quot;) if item == &quot;burger&quot;: more -= 1 total += 3.99 elif item == &quot;fries&quot;: more -= 1 total += 1.99 elif item == &quot;drink&quot;: more -= 1 total += 0.99 else: print(&quot;did you misspell?&quot;) print(&quot;$&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 0 $5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? Some problems that could arise from our project are small variable or string errors. However, one should be cautious about large errors such as images not loading or the time constraints | What are some test cases that can be used? Some test cases would be examples or each other&#39;s work | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? Furthermore, it would be advantageous to break the pieces to each team member. As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://genechang1.github.io/fastPage1/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "MarkDown Table",
            "content": "Period 1 2 3 4 5 . Class | AP Physics C | AP Calc BC | APCSP | APEL | APUSH | . print(&quot;Yes&quot;) . Yes .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Nathan's Magnificent Quiz",
            "content": "score = [] scoresDict = {&quot;import&quot;:10, &quot;if&quot;:20, &quot;expression&quot;:30} for keys in scoresDict.keys(): answer1 = input(&quot;What command is used to include other functions that were previously developed?&quot;) if answer1 == &quot;import&quot;: score.append(scoresDict[&quot;import&quot;]) else: print(&quot;Incorrect!&quot;) answer2 = input(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if answer2 == &quot;if&quot;: score.append(scoresDict[&quot;if&quot;]) else: print(&quot;Incorrect!&quot;) answer3 = input(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if answer3 == &quot;expression&quot;: score.append(scoresDict[&quot;expression&quot;]) else: print(&quot;Incorrect!&quot;) print(&quot;Your score is&quot;, sum(score)) . Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! . KeyboardInterrupt Traceback (most recent call last) /Users/genechang/fastPage1/_notebooks/Quiz.ipynb Cell 2 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print(&#34;Incorrect!&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; answer2 = input(&#34;What command is used to evaluate correct or incorrect response in this example?&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if answer2 == &#34;if&#34;: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; score.append(scoresDict[&#34;if&#34;]) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1177, in Kernel.raw_input(self, prompt) 1173 if not self._allow_stdin: 1174 raise StdinNotImplementedError( 1175 &#34;raw_input was called, but this frontend does not support input requests.&#34; 1176 ) -&gt; 1177 return self._input_request( 1178 str(prompt), 1179 self._parent_ident[&#34;shell&#34;], 1180 self.get_parent(&#34;shell&#34;), 1181 password=False, 1182 ) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1187, in Kernel._input_request(self, prompt, ident, parent, password) 1184 def _input_request(self, prompt, ident, parent, password=False): 1185 # Flush output before making the request. 1186 sys.stderr.flush() -&gt; 1187 sys.stdout.flush() 1189 # flush the stdin socket, to purge stale replies 1190 while True: File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:478, in OutStream.flush(self) 476 # wait for flush to actually get through, if we can. 477 evt = threading.Event() --&gt; 478 self.pub_thread.schedule(evt.set) 479 # and give a timeout to avoid 480 if not evt.wait(self.flush_timeout): 481 # write directly to __stderr__ instead of warning because 482 # if this is happening sys.stderr may be the problem. File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:210, in IOPubThread.schedule(self, f) 208 self._events.append(f) 209 # wake event thread (message content is ignored) --&gt; 210 self._event_pipe.send(b&#34;&#34;) 211 else: 212 f() File ~/Library/Python/3.8/lib/python/site-packages/zmq/sugar/socket.py:618, in Socket.send(self, data, flags, copy, track, routing_id, group) 611 data = zmq.Frame( 612 data, 613 track=track, 614 copy=copy or None, 615 copy_threshold=self.copy_threshold, 616 ) 617 data.group = group --&gt; 618 return super().send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:740, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:787, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:244, in zmq.backend.cython.socket._send_copy() File ~/Library/Python/3.8/lib/python/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . (I spammed it too much -_-) . You could also do as such: . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print (&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, genechang running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 3 questions. Are you ready to take a test? Question: What command is used to include other functions that were previously developed? . A few alternatives to making a quiz: . # scoresDict = {&quot;Vatican City&quot;:200, &quot;Okazaki&quot;:400, &quot;Gandalf&quot;:100, &quot;Asia&quot;:200} # answer1 = input(&quot;What is the smallest country?&quot;).capitalize() # if answer1 == &quot;Vatican City&quot;: # score.append(scoresDict[&quot;Vatican City&quot;]) # else: # score.append(score - 100) # print(&quot;Your score is&quot;, score[0]) # answer2 = input(&quot;What are the fragments of DNA in replication called?&quot;).capitalize() # if answer1 == &quot;Okazaki&quot;: # score.append(score[0] + scoresDict[&quot;Okazaki&quot;]) # score.pop(0) # else: # score.append(score[0] - 100) # score.pop(0) # print(&quot;Your score is&quot;, score[0]) . # answer = (input(&quot;What is the secret word? &quot;)).capitalize() guesses = 5 # while guesses &gt; 0: # answer = (input(&quot;What is the word? &quot;)).capitalize() # if answer == secretWord: # print (&quot;You win!&quot;) # break # else: # print (&quot;You lose, try again!&quot;) # guesses -= 1 # else: # print(&quot;Game over&quot;) # # Store a number inside a variable (lucky number) # # Get the user&#39;s favorite number and store it # # Check if the user has the same facorite number as you # luckyNumber = 7 # answer = int(input(&quot;What do you think the lucky number is?&quot;)) # if answer &gt; luckyNumber: # print(&quot;Too high!&quot;) # elif answer &lt; luckyNumber: # print(&quot;Too low!&quot;) # else: # print(&quot;Good job!&quot;) .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Psychology and the Good Life",
            "content": "",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Psychology and the Good Life",
            "content": "",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Markdowntable",
            "content": "Period 1 2 3 4 5 . Class | AP Physics C | AP Calc BC | APCSP | APEL | APUSH | . print(&quot;Yes&quot;) . Yes .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Quiz",
            "content": "score = [] scoresDict = {&quot;import&quot;:10, &quot;if&quot;:20, &quot;expression&quot;:30} for keys in scoresDict.keys(): answer1 = input(&quot;What command is used to include other functions that were previously developed?&quot;) if answer1 == &quot;import&quot;: score.append(scoresDict[&quot;import&quot;]) else: print(&quot;Incorrect!&quot;) answer2 = input(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if answer2 == &quot;if&quot;: score.append(scoresDict[&quot;if&quot;]) else: print(&quot;Incorrect!&quot;) answer3 = input(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if answer3 == &quot;expression&quot;: score.append(scoresDict[&quot;expression&quot;]) else: print(&quot;Incorrect!&quot;) print(&quot;Your score is&quot;, sum(score)) . Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! . KeyboardInterrupt Traceback (most recent call last) /Users/genechang/fastPage1/_notebooks/Quiz.ipynb Cell 2 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print(&#34;Incorrect!&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; answer2 = input(&#34;What command is used to evaluate correct or incorrect response in this example?&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if answer2 == &#34;if&#34;: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; score.append(scoresDict[&#34;if&#34;]) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1177, in Kernel.raw_input(self, prompt) 1173 if not self._allow_stdin: 1174 raise StdinNotImplementedError( 1175 &#34;raw_input was called, but this frontend does not support input requests.&#34; 1176 ) -&gt; 1177 return self._input_request( 1178 str(prompt), 1179 self._parent_ident[&#34;shell&#34;], 1180 self.get_parent(&#34;shell&#34;), 1181 password=False, 1182 ) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1187, in Kernel._input_request(self, prompt, ident, parent, password) 1184 def _input_request(self, prompt, ident, parent, password=False): 1185 # Flush output before making the request. 1186 sys.stderr.flush() -&gt; 1187 sys.stdout.flush() 1189 # flush the stdin socket, to purge stale replies 1190 while True: File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:478, in OutStream.flush(self) 476 # wait for flush to actually get through, if we can. 477 evt = threading.Event() --&gt; 478 self.pub_thread.schedule(evt.set) 479 # and give a timeout to avoid 480 if not evt.wait(self.flush_timeout): 481 # write directly to __stderr__ instead of warning because 482 # if this is happening sys.stderr may be the problem. File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:210, in IOPubThread.schedule(self, f) 208 self._events.append(f) 209 # wake event thread (message content is ignored) --&gt; 210 self._event_pipe.send(b&#34;&#34;) 211 else: 212 f() File ~/Library/Python/3.8/lib/python/site-packages/zmq/sugar/socket.py:618, in Socket.send(self, data, flags, copy, track, routing_id, group) 611 data = zmq.Frame( 612 data, 613 track=track, 614 copy=copy or None, 615 copy_threshold=self.copy_threshold, 616 ) 617 data.group = group --&gt; 618 return super().send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:740, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:787, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:244, in zmq.backend.cython.socket._send_copy() File ~/Library/Python/3.8/lib/python/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . (I spammed it too much -_-) . You could also do as such: . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print (&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, genechang running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 3 questions. Are you ready to take a test? Question: What command is used to include other functions that were previously developed? . A few alternatives to making a quiz: . # scoresDict = {&quot;Vatican City&quot;:200, &quot;Okazaki&quot;:400, &quot;Gandalf&quot;:100, &quot;Asia&quot;:200} # answer1 = input(&quot;What is the smallest country?&quot;).capitalize() # if answer1 == &quot;Vatican City&quot;: # score.append(scoresDict[&quot;Vatican City&quot;]) # else: # score.append(score - 100) # print(&quot;Your score is&quot;, score[0]) # answer2 = input(&quot;What are the fragments of DNA in replication called?&quot;).capitalize() # if answer1 == &quot;Okazaki&quot;: # score.append(score[0] + scoresDict[&quot;Okazaki&quot;]) # score.pop(0) # else: # score.append(score[0] - 100) # score.pop(0) # print(&quot;Your score is&quot;, score[0]) . # answer = (input(&quot;What is the secret word? &quot;)).capitalize() guesses = 5 # while guesses &gt; 0: # answer = (input(&quot;What is the word? &quot;)).capitalize() # if answer == secretWord: # print (&quot;You win!&quot;) # break # else: # print (&quot;You lose, try again!&quot;) # guesses -= 1 # else: # print(&quot;Game over&quot;) # # Store a number inside a variable (lucky number) # # Get the user&#39;s favorite number and store it # # Check if the user has the same facorite number as you # luckyNumber = 7 # answer = int(input(&quot;What do you think the lucky number is?&quot;)) # if answer &gt; luckyNumber: # print(&quot;Too high!&quot;) # elif answer &lt; luckyNumber: # print(&quot;Too low!&quot;) # else: # print(&quot;Good job!&quot;) .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lists Dictionaries and Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Gene Chang&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 2147000000.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[3], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Gene Chang &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 2147000000.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Gene Chang&#39;, &#39;age&#39;: 16, &#39;score&#39;: 2147000000.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Gene Chang &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Nathaniel&quot;, &quot;LastName&quot;: &quot;Capule&quot;, &quot;DOB&quot;: &quot;July 8&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;nathancapule13@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2008 BMW 328i&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Toby&quot;, &quot;LastName&quot;: &quot;Leeder&quot;, &quot;DOB&quot;: &quot;March 10&quot;, &quot;Residence&quot;: &quot;4s Ranch&quot;, &quot;Email&quot;: &quot;tobyzeavleeder@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Gene&quot;, &quot;LastName&quot;: &quot;Chang&quot;, &quot;DOB&quot;: &quot;February 19&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;genechang0219@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() def backwards_while_loop(): print(&quot;Backwards Time n&quot;) i = 4 while 0 &lt; i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i -= 1 return backwards_while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Nathaniel Capule Residence: Del Sur Birth Day: July 8 Cars: 2008 BMW 328i Toby Leeder Residence: 4s Ranch Birth Day: March 10 Cars: None Gene Chang Residence: Del Sur Birth Day: February 19 Cars: None Backwards Time Gene Chang Residence: Del Sur Birth Day: February 19 Cars: None Toby Leeder Residence: 4s Ranch Birth Day: March 10 Cars: None Nathaniel Capule Residence: Del Sur Birth Day: July 8 Cars: 2008 BMW 328i Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Gene Morbius Residence: San Diego Birth Day: October 21 1732 BC Cars: N, o, n, e . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Gene Morbius Residence: San Diego Birth Day: October 21 1732 BC Cars: N, o, n, e . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . score = [] scoresDict = {16:10, &quot;Gene&quot;:20, &quot;San Diego&quot;:30} for keys in scoresDict.keys(): answer1 = input(&quot;How old is Gene?&quot;) if answer1 == 16: score.append(scoresDict[16]) else: print(&quot;Incorrect!&quot;) answer2 = input(&quot;What is Gene&#39;s Name?&quot;) if answer2 == &quot;Gene&quot;: score.append(scoresDict[&quot;Gene&quot;]) else: print(&quot;Incorrect!&quot;) answer3 = input(&quot;Where does Gene live?&quot;) if answer3 == &quot;San Diego&quot;: score.append(scoresDict[&quot;San Diego&quot;]) else: print(&quot;Incorrect!&quot;) print(&quot;Your score is&quot;, sum(score)) . Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Your score is 50 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://genechang1.github.io/fastPage1/collegeboard/:NewCategory/",
            "relUrl": "/collegeboard/:NewCategory/",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Student Copy Of Bridge To Bc Pacing (fall 2022)",
            "content": "Week Monday Tuesday Wednesday Thursday Friday . 0 | August 15 | 16 | First Day of School 17 | 18 | 19 | . | | | Welcome to AP Calculus BC! . Unit 1 HW 1: . Read Finding the Glory in the Struggle and Post Reflection to Canvas Discussion Board (Discussion Closes 11:59 pm 8/21/2022) . *Classes about 51 minutes . | Begin Unit 1: Functions and Limits . 1.1: Domain . 2.2: An Intro to the Limit of a Function . Notes Template . Class Notes . Unit 1 HW 2: . p. 12 1.1: #9, 17, 23-29 . p. 102 2.2: #5, 10, 12, 23 . Worked Out Solutions . | 1.1: Absolute Value . 2.3: Calculating Limits Using the Limit Laws . Notes Template . Class Notes . Unit 1 HW 3: . p. 14 1.1: # 41, 64, 67 . p. 114 2.3: # 7-9, 11, 19, 25, 34, 36, 41 . Worked Out Solutions . | . 1 | 22 | 23 | 24 | 25 | 26 | . | 2.3: Squeeze Theorem . 3.5: Limits of Trigonometric Functions . Notes Template . Class Notes . Unit 1 HW 4: . p. 115 2.3: # 48, 50, 52 . p. 224 3.5: #29-37 . Worked Out Solutions . | 2.4: Limits at Infinity and Horizontal Asymptotes . Notes Template . Class Notes . Unit 1 HW 5: . p. 128 2.4: #13, 18, 23, 28, 38, 42, 54, 58, 80 . Worked Out Solutions . | 2.5: Continuity . Notes Template . Class Notes . Unit 1 HW 6: . p. 143 2.5: # 32-34, 37, 46, 47, 50, 57 . Worked Out Solutions . AND Squeeze Theorem Fun Worksheet 😊 . Solutions . Print Unit 1 Closure Activity and Bring to Class . | Check for Understanding: . Limits and Intermediate Value Theorem . Peer Review . Unit 1 Closure Activity . Unit 1 HW 7: . Complete Unit 1 Closure Core Problems: . 1.1, 1.3(d-h,j,l,m,o), 2.1, 3.1, 4.2, 4.3, 4.4, 4.5, 5.2 b . Worked Out Solutions . | Begin Unit 2: The Derivative . 3.1 &amp; 3.2: The Derivative . Notes Template . Class Notes . Unit 2 HW 1: . p. 173 3.1: # 4, 14, 15, 28, 59, 61, 75 . p. 188 3.2: # 11, 24, 35, 42, 56, 67 . Worked Out Solutions . | . 2 | 29 | 30 | 31 | September 1 | 2 | . | 3.3 &amp; 3.4: Rules of Differentiation . Class Work: . p. 203 3.3: #84, 92, 101, 106 . p. 213 3.4: #66, 68, 75 . Worked Out Solutions . Unit 2 HW 2: . Finish Class Work . p. 203 3.3: # 44, 49, 81 . p. 213 3.4: #34, 44, 55, 56, 63 . Worked Out Solutions . | 3.5: Derivatives of Trigonometric Functions . Notes Template . Class Notes . Unit 2 HW 3: . p. 223 3.5: # 5, 6, 11, 13, 15, 39, 41, 47, 59, 67 . Worked Out Solutions . | 3.6: The Chain Rule . Chain Rule Fun Worksheet 😊 . Unit 2 HW 4: . Finish Chain Rule Fun Worksheet 😊 . Worked Out Solutions . | Test 1 . Functions, Limits, Continuity, and Rates of Change . | 3.7: Implicit Differentiation and Derivatives of Inverse Functions . Notes Template . Class Notes 1/Class Notes 2 . Unit 2 HW 5: . p. 248 3.7: #22, 36, 55, 69, 102, 104, 108, 112, 113 AND . Inverse Functions Fun Worksheet 😊 #7, 10, 13 . Worked Out Solutions (Text) . Worked Out Solutions (Worksheet) . | . 3 | Labor Day September 5 | 6 | 7 | 8 | 9 | . | Holiday - No School 😊 | 3.7: Inverse Trigonometric Functions and Their Derivatives . Notes Template . Class Notes . Unit 2 HW 6: . p. 248 3.7: #41-48, 68, 70-72 . Worked Out Solutions . | 3.8: Derivatives of Logarithmic and Exponential Functions; Logarithmic Differentiation . Notes Template . Class Notes . Unit 2 HW 7: . p. 259 3.8: #18, 28, 31, 33, 41, 44, 47, 52, 68, 72, 76 . Worked Out Solutions . Print Unit 2 Closure Activity and Bring to Class . | Check for Understanding: Derivatives . Differentiability, Inverse Functions &amp; Derivatives (Table/Graph), &amp; Logarithmic Differentiation . Unit 2 Closure Activity . Unit 2 HW 8: . Unit 2 Closure Learning Targets 1.1, 1.3, 2.1, 3.1, 3.2, 4.1, 5.1 . | Peer Review . Unit 2 Closure Activity . Unit 2 HW 9: . Complete Unit 2 Closure . Learning Targets 4.2 (a-h, l), 7.1, 8.1, 8.2 . Worked Out Solutions - Don’t Peek Too Soon!!! . | . Week Monday Tuesday Wednesday Thursday Friday . 4 | 12 | Back to School Night 13 | 14 | 15 | 16 | . | Begin Unit 3 . 3.9: Applications of the Derivative . Rectilinear Motion Screencast . Notes Template . Class Notes . Unit 3 HW 1: . p. 270 3.9: #1, 5, 8, 22 . Worked Out Solutions . Watch Related Rates Screencast and Use Notes Template to Take Notes . | 3.10: Related Rates . Related Rates Fun Worksheet☺ . Unit 3 HW 2: . Related Rates Fun Wksht 😊 . Worked Out Solutions . | 3.11: Local Linearity . Notes Powerpoint . Unit 3 HW 3: . p. 285 3.11 #6, 12, 17, 19-22 . Worked Out Solutions . | Test 2 . Functions, Limits, and Differentiation . | 4.1: Maximum and Minimum Values (Relative) . Notes Template . Class Notes . Unit 3 HW 4: . p. 303 4.1 #35, 40, 49, 72, . 79(skip part d), 91 . Worked Out Solutions . Watch Extreme Value Theorem and Absolute Extrema Screencast and Use Notes Template to Take Notes . | . 5 | Professional Development 19 | 20 | 21 | 22 | 23 | . | No School for Students | 4.1: Maximum and Minimum Values (Absolute) . Class Work: . p. 303 4.1 #10, 12, 16, 18, 44, 48, 50, 62, 65, 66, 68, 70, 71, 80, 81, 88 . Unit 3 HW 5: . Finish Classwork . Worked Out Solutions . | 4.2: Mean Value Theorem . Notes Template . Class Notes . Unit 3 HW 6: . p. 313 4.2 #1, 5, 11, 13, 15, 19, 29, 30, 35, 46 . Worked Out Solutions . | 4.3: How Derivatives Affect the Shape of a Graph . 4.5: Summary of Curve Sketching . Notes Template . Class Notes . Unit 3 HW 7: . Function Analysis &amp; Curve Sketching Fun Worksheet 😊 . #1, 2 (c only), 4, 5, 6, 8, 10 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . Applications of the Derivative . | Function Analysis . | . Peer Review . Unit 3 HW 8: . Watch Optimization Screencast &amp; Use Notes Template to Take Notes . p. 374 4.6 #1, 5 (find MAXIMUM), 9, 13, 18 . Worked Out Solutions . | . 6 | 26 | 27 | 28 | 29 | End of 1st 6-Weeks 30 | . | 4.6: Optimization Problems . Class Work: . p. 374 4.6 #7, 14, 15, 20, 22, 25, 27, 34, 42, 46, 49 . *Core Problems highlighted in yellow . Unit 3 HW 9: . Finish Classwork . Print Unit 3 Closure Activity and Bring to Class . Worked Out Solutions . | Unit 3 Closure Activity . Unit 3 HW 10A: . Unit 3 Closure Activity . Learning Targets 1.1, 2.1, 3.1, 3.2, 3.3, 4.1 . Solutions Part I . | Unit 3 Closure Activity . Unit 3 HW 10B: . Unit 3 Closure Activity . Learning Targets: 4.2, 4.3, 5.1, 6.1, 6.2 . Solutions Part II . Optional: Extra Practice Fun Worksheet #1a, 2-4, 6 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . MVT . | Related Rates . | Optimization . | . Peer Review . Begin Unit 4: Integration . 5.1: Antiderivatives . Notes Powerpoint . Unit 4 HW 1: . p. 392 5.1 #19, 21, 22, 26, 28, 41, 46, 56, 58, 63, 74 . Worked Out Solutions . | 5.2: Riemann Sums . Notes Template . Class Notes . Unit 4 HW 2: . p. 410 5.2 #9, 15, 16, 21-23, 32, 33 . Worked Out Solutions . | . 7 | October 3 | Grades Due/Tri 1 Conferences 4 | 5 | Parent Conferences 6 | Homecoming Parade 7 | . | 5.2: Area as a Limit . Notes Template . Class Notes . Unit 4 HW 3: . p. 410 5.2 #34, 36, 38-40, 42, 43, 44 . Worked Out Solutions . | 5.3: The Definite Integral . Notes Template . Class Notes . Unit 4 HW 4: . p. 428 5.3 #27, 29, 32, 41, 43, 47, 53, 60, 67 . Worked Out Solutions . *Classes about 46 minutes . | Test 3 FR . Functions, Limits, Differentiation, Applications of Differentiation . HW: . No Homework ☺ . | Test 3 MC . Functions, Limits, Differentiation, Applications of Differentiation . *Classes about 46 minutes . | 5.4: The Fundamental Theorem of Calculus . Notes Template . Class Notes . Unit 4 HW 6: . p. 441 5.4 #7, 11, 17, 23, 27, 33, 36, 43, 49, 50, 55, 68, 79 . Worked Out Solutions . *Classes about 67 minutes . | . Week Monday Tuesday Wednesday Thursday Friday . 8 | 10 | 11 | 12 | 13 | 14 | . | 5.4: The Fundamental Theorem of Calculus . Unit 4 HW 7: . Fundamental Theorem of Calculus Fun Worksheet 😊 . Worked Out Solutions . | 5.5: Indefinite Integrals . Notes PowerPoint . Unit 4 HW 8: . p. 454 5.5 #16, 20, 22, 36, 42, 45, 58, 60, 62, 66, 68, 70, 75, 77, 82 . Worked Out Solutions . | 5.6: Method of Substitution . Notes Template . Class Notes . Unit 4 HW 9: . p. 467 5.6 #22, 26, 28, 31, 33, 42, 52, 54, 67, 72, 73, 77, 84 . Worked Out Solutions . | Check for Understanding: Integration . Limit Definition of Definite Integral . | Fundamental Theorem of Calculus . | . Extra Practice . Functions Defined as Definite Integrals Worksheet . Unit 4 HW 10: . Finish Classwork . Worked Out Solutions (Ignore #1) . | Peer Review . Extra Practice . Riemann Sum to Definite Integral . Integration . Unit 4 HW 11: . Riemann Sum to Definite Integral Fun Wksht (All) AND Integration Fun Wksht 😊 #7, 11, 13, 14, 15, 16, 20 AND Print Unit 4 Closure Activity and Bring to Class . Worked Out Solutions 1 . Worked Out Solutions 2 . | . 9 | 17 | 18 | 19 | 20 | 21 | . | Unit 4 Closure Activity . Unit 4 HW 12: . Complete Unit 4 Closure Activity . Core Problems: . 1.2, 1.4, 2.1, 3.1 (a&amp;c), 4.1, 4.2(c), 5.1, 5.3(b), 5.4, 6.1, 6.2, 6.6,7.1, 7.2(c), 7.3(c), 8.1, 8.2 . Worked Out Solutions . | Begin Unit 5: Applications of Integration . 6.1: Area Between Curves . Notes Template . Class Notes . Unit 5 HW 1: . p. 486 6.1 #6, 8, 15, 32, 47, 58, 60, 66, 67, 72 . Worked Out Solutions . | 6.2: Average Value of a Function . Notes PowerPoint . Unit 5 HW 2: . p. 494 6.2 #9, 10, 14, 15, 18, 20, 21, 23, 24, 26, 32 . Worked Out Solutions . | Test 4 . Integration . HW: . See 10/19/2022 . | 6.3: The Definite Integral as an Accumulation Function . Notes PowerPoint . Unit 5 HW 3: . p. 505 6.3 #8, 12, 13, 14, 15, 20, 21, 26, 27 . Worked Out Solutions . | . 10 | 24 | 25 | 26 | 27 | 28 | . | 6.4: Rectilinear Motion Revisited . Notes Template . Class Notes . Unit 5 HW 4: . p. 515 6.4 #15, 17, 24, 26, 28, 34 . Worked Out Solutions . | 6.5: Volume (Known Cross Sections) . Notes Template . Class Notes . Unit 5 HW 5: . Volume of Solids with Known Cross Sections Fun Worksheet 😊 . Worked Out Solutions . | 6.5: Volume (Disks and Washers) . Notes Template . Class Notes . PowerPoint . Reference Questions . Unit 5 HW 6: . p. 528 6.5 #22, 25, 31, 32, 39, 40, 52, 58, 62 . Solutions . | 6.5: Volume (Cylindrical Shells) . Notes Template . Class Notes . Unit 5 HW 7: . p. A28 Appendix D #7, 10, 13, 16, 19, 22, 28, 31, 48 . Worked Out Solutions . | 6.6: Arc Length . Notes Template . Class Notes . Unit 5 HW 8: . Area, Volume, and Arc Length Fun Worksheet 😊 . Worked Out Solutions . Print Unit 5 Closure Activity and Bring to Class . | . 11 | Professional Development 31 | November 1 | 2 | 3 | 4 | . | No School for Students | Unit 5 Closure Activity . Unit 5 HW 9: . Complete Unit 5 Closure Activity . Worked Out Solutions . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . Worked Out Solutions . | Final Part 1: FR . Application of the Definite Integral . HW: . Trimester I Review Fun Worksheet ☺ . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | . 12 | 7 | 8 | 9 | 10 | Veteran’s Day 11 | . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | AM: Trimester I Review . PM: Trimester I Final Exam . Multiple Choice . Period 5 . HW: . Study and prepare for Final Exam . | Trimester I Final Exam . Multiple Choice . Periods 1 &amp; 2 . | Trimester I Final Exam . Multiple Choice . Periods 3 &amp; 4 . Notes Template for Monday, Nov. 14 . | Holiday – No School 😊 | .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "name = Gene Chang print (&quot;Hello my name is&quot; name) .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Binary",
            "content": "&lt;/html&gt; . &lt;style id=”back”}&gt; body{ . } . &lt;/style&gt; . &lt;/script&gt; . &lt;/html&gt; .",
            "url": "https://genechang1.github.io/fastPage1/binary/",
            "relUrl": "/binary/",
            "date": " • Jul 17, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Binary",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://genechang1.github.io/fastPage1/binary/",
            "relUrl": "/binary/",
            "date": " • Jul 15, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://genechang1.github.io/fastPage1/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Test",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post36": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . We’re making a find the person game lol .",
            "url": "https://genechang1.github.io/fastPage1/:NewCategory/",
            "relUrl": "/:NewCategory/",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://genechang1.github.io/fastPage1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://genechang1.github.io/fastPage1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}