{
  
    
        "post0": {
            "title": "MarkDown Table",
            "content": "Period | 1 | 2 | 3 | 4 | 5 | Class | AP Physics C | AP Calculus BC | AP Computer Science | APEL | APUSH | . print(&quot;Yes&quot;) . Yes .",
            "url": "/2022/09/05/markdowntable.html",
            "relUrl": "/2022/09/05/markdowntable.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "name = Gene Chang print (&quot;Hello my name is&quot; name) .",
            "url": "/2022/09/05/Untitled-1.html",
            "relUrl": "/2022/09/05/Untitled-1.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Student Copy Of Bridge To Bc Pacing (fall 2022)",
            "content": "Week Monday Tuesday Wednesday Thursday Friday . 0 | August 15 | 16 | First Day of School 17 | 18 | 19 | . | | | Welcome to AP Calculus BC! . Unit 1 HW 1: . Read Finding the Glory in the Struggle and Post Reflection to Canvas Discussion Board (Discussion Closes 11:59 pm 8/21/2022) . *Classes about 51 minutes . | Begin Unit 1: Functions and Limits . 1.1: Domain . 2.2: An Intro to the Limit of a Function . Notes Template . Class Notes . Unit 1 HW 2: . p. 12 1.1: #9, 17, 23-29 . p. 102 2.2: #5, 10, 12, 23 . Worked Out Solutions . | 1.1: Absolute Value . 2.3: Calculating Limits Using the Limit Laws . Notes Template . Class Notes . Unit 1 HW 3: . p. 14 1.1: # 41, 64, 67 . p. 114 2.3: # 7-9, 11, 19, 25, 34, 36, 41 . Worked Out Solutions . | . 1 | 22 | 23 | 24 | 25 | 26 | . | 2.3: Squeeze Theorem . 3.5: Limits of Trigonometric Functions . Notes Template . Class Notes . Unit 1 HW 4: . p. 115 2.3: # 48, 50, 52 . p. 224 3.5: #29-37 . Worked Out Solutions . | 2.4: Limits at Infinity and Horizontal Asymptotes . Notes Template . Class Notes . Unit 1 HW 5: . p. 128 2.4: #13, 18, 23, 28, 38, 42, 54, 58, 80 . Worked Out Solutions . | 2.5: Continuity . Notes Template . Class Notes . Unit 1 HW 6: . p. 143 2.5: # 32-34, 37, 46, 47, 50, 57 . Worked Out Solutions . AND Squeeze Theorem Fun Worksheet 😊 . Solutions . Print Unit 1 Closure Activity and Bring to Class . | Check for Understanding: . Limits and Intermediate Value Theorem . Peer Review . Unit 1 Closure Activity . Unit 1 HW 7: . Complete Unit 1 Closure Core Problems: . 1.1, 1.3(d-h,j,l,m,o), 2.1, 3.1, 4.2, 4.3, 4.4, 4.5, 5.2 b . Worked Out Solutions . | Begin Unit 2: The Derivative . 3.1 &amp; 3.2: The Derivative . Notes Template . Class Notes . Unit 2 HW 1: . p. 173 3.1: # 4, 14, 15, 28, 59, 61, 75 . p. 188 3.2: # 11, 24, 35, 42, 56, 67 . Worked Out Solutions . | . 2 | 29 | 30 | 31 | September 1 | 2 | . | 3.3 &amp; 3.4: Rules of Differentiation . Class Work: . p. 203 3.3: #84, 92, 101, 106 . p. 213 3.4: #66, 68, 75 . Worked Out Solutions . Unit 2 HW 2: . Finish Class Work . p. 203 3.3: # 44, 49, 81 . p. 213 3.4: #34, 44, 55, 56, 63 . Worked Out Solutions . | 3.5: Derivatives of Trigonometric Functions . Notes Template . Class Notes . Unit 2 HW 3: . p. 223 3.5: # 5, 6, 11, 13, 15, 39, 41, 47, 59, 67 . Worked Out Solutions . | 3.6: The Chain Rule . Chain Rule Fun Worksheet 😊 . Unit 2 HW 4: . Finish Chain Rule Fun Worksheet 😊 . Worked Out Solutions . | Test 1 . Functions, Limits, Continuity, and Rates of Change . | 3.7: Implicit Differentiation and Derivatives of Inverse Functions . Notes Template . Class Notes 1/Class Notes 2 . Unit 2 HW 5: . p. 248 3.7: #22, 36, 55, 69, 102, 104, 108, 112, 113 AND . Inverse Functions Fun Worksheet 😊 #7, 10, 13 . Worked Out Solutions (Text) . Worked Out Solutions (Worksheet) . | . 3 | Labor Day September 5 | 6 | 7 | 8 | 9 | . | Holiday - No School 😊 | 3.7: Inverse Trigonometric Functions and Their Derivatives . Notes Template . Class Notes . Unit 2 HW 6: . p. 248 3.7: #41-48, 68, 70-72 . Worked Out Solutions . | 3.8: Derivatives of Logarithmic and Exponential Functions; Logarithmic Differentiation . Notes Template . Class Notes . Unit 2 HW 7: . p. 259 3.8: #18, 28, 31, 33, 41, 44, 47, 52, 68, 72, 76 . Worked Out Solutions . Print Unit 2 Closure Activity and Bring to Class . | Check for Understanding: Derivatives . Differentiability, Inverse Functions &amp; Derivatives (Table/Graph), &amp; Logarithmic Differentiation . Unit 2 Closure Activity . Unit 2 HW 8: . Unit 2 Closure Learning Targets 1.1, 1.3, 2.1, 3.1, 3.2, 4.1, 5.1 . | Peer Review . Unit 2 Closure Activity . Unit 2 HW 9: . Complete Unit 2 Closure . Learning Targets 4.2 (a-h, l), 7.1, 8.1, 8.2 . Worked Out Solutions - Don’t Peek Too Soon!!! . | . Week Monday Tuesday Wednesday Thursday Friday . 4 | 12 | Back to School Night 13 | 14 | 15 | 16 | . | Begin Unit 3 . 3.9: Applications of the Derivative . Rectilinear Motion Screencast . Notes Template . Class Notes . Unit 3 HW 1: . p. 270 3.9: #1, 5, 8, 22 . Worked Out Solutions . Watch Related Rates Screencast and Use Notes Template to Take Notes . | 3.10: Related Rates . Related Rates Fun Worksheet☺ . Unit 3 HW 2: . Related Rates Fun Wksht 😊 . Worked Out Solutions . | 3.11: Local Linearity . Notes Powerpoint . Unit 3 HW 3: . p. 285 3.11 #6, 12, 17, 19-22 . Worked Out Solutions . | Test 2 . Functions, Limits, and Differentiation . | 4.1: Maximum and Minimum Values (Relative) . Notes Template . Class Notes . Unit 3 HW 4: . p. 303 4.1 #35, 40, 49, 72, . 79(skip part d), 91 . Worked Out Solutions . Watch Extreme Value Theorem and Absolute Extrema Screencast and Use Notes Template to Take Notes . | . 5 | Professional Development 19 | 20 | 21 | 22 | 23 | . | No School for Students | 4.1: Maximum and Minimum Values (Absolute) . Class Work: . p. 303 4.1 #10, 12, 16, 18, 44, 48, 50, 62, 65, 66, 68, 70, 71, 80, 81, 88 . Unit 3 HW 5: . Finish Classwork . Worked Out Solutions . | 4.2: Mean Value Theorem . Notes Template . Class Notes . Unit 3 HW 6: . p. 313 4.2 #1, 5, 11, 13, 15, 19, 29, 30, 35, 46 . Worked Out Solutions . | 4.3: How Derivatives Affect the Shape of a Graph . 4.5: Summary of Curve Sketching . Notes Template . Class Notes . Unit 3 HW 7: . Function Analysis &amp; Curve Sketching Fun Worksheet 😊 . #1, 2 (c only), 4, 5, 6, 8, 10 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . Applications of the Derivative . | Function Analysis . | . Peer Review . Unit 3 HW 8: . Watch Optimization Screencast &amp; Use Notes Template to Take Notes . p. 374 4.6 #1, 5 (find MAXIMUM), 9, 13, 18 . Worked Out Solutions . | . 6 | 26 | 27 | 28 | 29 | End of 1st 6-Weeks 30 | . | 4.6: Optimization Problems . Class Work: . p. 374 4.6 #7, 14, 15, 20, 22, 25, 27, 34, 42, 46, 49 . *Core Problems highlighted in yellow . Unit 3 HW 9: . Finish Classwork . Print Unit 3 Closure Activity and Bring to Class . Worked Out Solutions . | Unit 3 Closure Activity . Unit 3 HW 10A: . Unit 3 Closure Activity . Learning Targets 1.1, 2.1, 3.1, 3.2, 3.3, 4.1 . Solutions Part I . | Unit 3 Closure Activity . Unit 3 HW 10B: . Unit 3 Closure Activity . Learning Targets: 4.2, 4.3, 5.1, 6.1, 6.2 . Solutions Part II . Optional: Extra Practice Fun Worksheet #1a, 2-4, 6 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . MVT . | Related Rates . | Optimization . | . Peer Review . Begin Unit 4: Integration . 5.1: Antiderivatives . Notes Powerpoint . Unit 4 HW 1: . p. 392 5.1 #19, 21, 22, 26, 28, 41, 46, 56, 58, 63, 74 . Worked Out Solutions . | 5.2: Riemann Sums . Notes Template . Class Notes . Unit 4 HW 2: . p. 410 5.2 #9, 15, 16, 21-23, 32, 33 . Worked Out Solutions . | . 7 | October 3 | Grades Due/Tri 1 Conferences 4 | 5 | Parent Conferences 6 | Homecoming Parade 7 | . | 5.2: Area as a Limit . Notes Template . Class Notes . Unit 4 HW 3: . p. 410 5.2 #34, 36, 38-40, 42, 43, 44 . Worked Out Solutions . | 5.3: The Definite Integral . Notes Template . Class Notes . Unit 4 HW 4: . p. 428 5.3 #27, 29, 32, 41, 43, 47, 53, 60, 67 . Worked Out Solutions . *Classes about 46 minutes . | Test 3 FR . Functions, Limits, Differentiation, Applications of Differentiation . HW: . No Homework ☺ . | Test 3 MC . Functions, Limits, Differentiation, Applications of Differentiation . *Classes about 46 minutes . | 5.4: The Fundamental Theorem of Calculus . Notes Template . Class Notes . Unit 4 HW 6: . p. 441 5.4 #7, 11, 17, 23, 27, 33, 36, 43, 49, 50, 55, 68, 79 . Worked Out Solutions . *Classes about 67 minutes . | . Week Monday Tuesday Wednesday Thursday Friday . 8 | 10 | 11 | 12 | 13 | 14 | . | 5.4: The Fundamental Theorem of Calculus . Unit 4 HW 7: . Fundamental Theorem of Calculus Fun Worksheet 😊 . Worked Out Solutions . | 5.5: Indefinite Integrals . Notes PowerPoint . Unit 4 HW 8: . p. 454 5.5 #16, 20, 22, 36, 42, 45, 58, 60, 62, 66, 68, 70, 75, 77, 82 . Worked Out Solutions . | 5.6: Method of Substitution . Notes Template . Class Notes . Unit 4 HW 9: . p. 467 5.6 #22, 26, 28, 31, 33, 42, 52, 54, 67, 72, 73, 77, 84 . Worked Out Solutions . | Check for Understanding: Integration . Limit Definition of Definite Integral . | Fundamental Theorem of Calculus . | . Extra Practice . Functions Defined as Definite Integrals Worksheet . Unit 4 HW 10: . Finish Classwork . Worked Out Solutions (Ignore #1) . | Peer Review . Extra Practice . Riemann Sum to Definite Integral . Integration . Unit 4 HW 11: . Riemann Sum to Definite Integral Fun Wksht (All) AND Integration Fun Wksht 😊 #7, 11, 13, 14, 15, 16, 20 AND Print Unit 4 Closure Activity and Bring to Class . Worked Out Solutions 1 . Worked Out Solutions 2 . | . 9 | 17 | 18 | 19 | 20 | 21 | . | Unit 4 Closure Activity . Unit 4 HW 12: . Complete Unit 4 Closure Activity . Core Problems: . 1.2, 1.4, 2.1, 3.1 (a&amp;c), 4.1, 4.2(c), 5.1, 5.3(b), 5.4, 6.1, 6.2, 6.6,7.1, 7.2(c), 7.3(c), 8.1, 8.2 . Worked Out Solutions . | Begin Unit 5: Applications of Integration . 6.1: Area Between Curves . Notes Template . Class Notes . Unit 5 HW 1: . p. 486 6.1 #6, 8, 15, 32, 47, 58, 60, 66, 67, 72 . Worked Out Solutions . | 6.2: Average Value of a Function . Notes PowerPoint . Unit 5 HW 2: . p. 494 6.2 #9, 10, 14, 15, 18, 20, 21, 23, 24, 26, 32 . Worked Out Solutions . | Test 4 . Integration . HW: . See 10/19/2022 . | 6.3: The Definite Integral as an Accumulation Function . Notes PowerPoint . Unit 5 HW 3: . p. 505 6.3 #8, 12, 13, 14, 15, 20, 21, 26, 27 . Worked Out Solutions . | . 10 | 24 | 25 | 26 | 27 | 28 | . | 6.4: Rectilinear Motion Revisited . Notes Template . Class Notes . Unit 5 HW 4: . p. 515 6.4 #15, 17, 24, 26, 28, 34 . Worked Out Solutions . | 6.5: Volume (Known Cross Sections) . Notes Template . Class Notes . Unit 5 HW 5: . Volume of Solids with Known Cross Sections Fun Worksheet 😊 . Worked Out Solutions . | 6.5: Volume (Disks and Washers) . Notes Template . Class Notes . PowerPoint . Reference Questions . Unit 5 HW 6: . p. 528 6.5 #22, 25, 31, 32, 39, 40, 52, 58, 62 . Solutions . | 6.5: Volume (Cylindrical Shells) . Notes Template . Class Notes . Unit 5 HW 7: . p. A28 Appendix D #7, 10, 13, 16, 19, 22, 28, 31, 48 . Worked Out Solutions . | 6.6: Arc Length . Notes Template . Class Notes . Unit 5 HW 8: . Area, Volume, and Arc Length Fun Worksheet 😊 . Worked Out Solutions . Print Unit 5 Closure Activity and Bring to Class . | . 11 | Professional Development 31 | November 1 | 2 | 3 | 4 | . | No School for Students | Unit 5 Closure Activity . Unit 5 HW 9: . Complete Unit 5 Closure Activity . Worked Out Solutions . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . Worked Out Solutions . | Final Part 1: FR . Application of the Definite Integral . HW: . Trimester I Review Fun Worksheet ☺ . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | . 12 | 7 | 8 | 9 | 10 | Veteran’s Day 11 | . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | AM: Trimester I Review . PM: Trimester I Final Exam . Multiple Choice . Period 5 . HW: . Study and prepare for Final Exam . | Trimester I Final Exam . Multiple Choice . Periods 1 &amp; 2 . | Trimester I Final Exam . Multiple Choice . Periods 3 &amp; 4 . Notes Template for Monday, Nov. 14 . | Holiday – No School 😊 | .",
            "url": "/2022/09/05/Student-Copy-of-Bridge-to-BC-Pacing-(Fall-2022).html",
            "relUrl": "/2022/09/05/Student-Copy-of-Bridge-to-BC-Pacing-(Fall-2022).html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Nathan's Magnificent Quiz",
            "content": "score = [] scoresDict = {&quot;import&quot;:10, &quot;if&quot;:20, &quot;expression&quot;:30} for keys in scoresDict.keys(): answer1 = input(&quot;What command is used to include other functions that were previously developed?&quot;) if answer1 == &quot;import&quot;: score.append(scoresDict[&quot;import&quot;]) else: print(&quot;Incorrect!&quot;) answer2 = input(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if answer2 == &quot;if&quot;: score.append(scoresDict[&quot;if&quot;]) else: print(&quot;Incorrect!&quot;) answer3 = input(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if answer3 == &quot;expression&quot;: score.append(scoresDict[&quot;expression&quot;]) else: print(&quot;Incorrect!&quot;) print(&quot;Your score is&quot;, sum(score)) . Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! Incorrect! . KeyboardInterrupt Traceback (most recent call last) /Users/genechang/fastPage1/_notebooks/Quiz.ipynb Cell 2 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print(&#34;Incorrect!&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; answer2 = input(&#34;What command is used to evaluate correct or incorrect response in this example?&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if answer2 == &#34;if&#34;: &lt;a href=&#39;vscode-notebook-cell:/Users/genechang/fastPage1/_notebooks/Quiz.ipynb#W1sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; score.append(scoresDict[&#34;if&#34;]) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1177, in Kernel.raw_input(self, prompt) 1173 if not self._allow_stdin: 1174 raise StdinNotImplementedError( 1175 &#34;raw_input was called, but this frontend does not support input requests.&#34; 1176 ) -&gt; 1177 return self._input_request( 1178 str(prompt), 1179 self._parent_ident[&#34;shell&#34;], 1180 self.get_parent(&#34;shell&#34;), 1181 password=False, 1182 ) File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/kernelbase.py:1187, in Kernel._input_request(self, prompt, ident, parent, password) 1184 def _input_request(self, prompt, ident, parent, password=False): 1185 # Flush output before making the request. 1186 sys.stderr.flush() -&gt; 1187 sys.stdout.flush() 1189 # flush the stdin socket, to purge stale replies 1190 while True: File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:478, in OutStream.flush(self) 476 # wait for flush to actually get through, if we can. 477 evt = threading.Event() --&gt; 478 self.pub_thread.schedule(evt.set) 479 # and give a timeout to avoid 480 if not evt.wait(self.flush_timeout): 481 # write directly to __stderr__ instead of warning because 482 # if this is happening sys.stderr may be the problem. File ~/Library/Python/3.8/lib/python/site-packages/ipykernel/iostream.py:210, in IOPubThread.schedule(self, f) 208 self._events.append(f) 209 # wake event thread (message content is ignored) --&gt; 210 self._event_pipe.send(b&#34;&#34;) 211 else: 212 f() File ~/Library/Python/3.8/lib/python/site-packages/zmq/sugar/socket.py:618, in Socket.send(self, data, flags, copy, track, routing_id, group) 611 data = zmq.Frame( 612 data, 613 track=track, 614 copy=copy or None, 615 copy_threshold=self.copy_threshold, 616 ) 617 data.group = group --&gt; 618 return super().send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:740, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:787, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:244, in zmq.backend.cython.socket._send_copy() File ~/Library/Python/3.8/lib/python/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . (I spammed it too much -_-) . You could also do as such: . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print (&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, genechang running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 3 questions. Are you ready to take a test? Question: What command is used to include other functions that were previously developed? . A few alternatives to making a quiz: . # scoresDict = {&quot;Vatican City&quot;:200, &quot;Okazaki&quot;:400, &quot;Gandalf&quot;:100, &quot;Asia&quot;:200} # answer1 = input(&quot;What is the smallest country?&quot;).capitalize() # if answer1 == &quot;Vatican City&quot;: # score.append(scoresDict[&quot;Vatican City&quot;]) # else: # score.append(score - 100) # print(&quot;Your score is&quot;, score[0]) # answer2 = input(&quot;What are the fragments of DNA in replication called?&quot;).capitalize() # if answer1 == &quot;Okazaki&quot;: # score.append(score[0] + scoresDict[&quot;Okazaki&quot;]) # score.pop(0) # else: # score.append(score[0] - 100) # score.pop(0) # print(&quot;Your score is&quot;, score[0]) . # answer = (input(&quot;What is the secret word? &quot;)).capitalize() guesses = 5 # while guesses &gt; 0: # answer = (input(&quot;What is the word? &quot;)).capitalize() # if answer == secretWord: # print (&quot;You win!&quot;) # break # else: # print (&quot;You lose, try again!&quot;) # guesses -= 1 # else: # print(&quot;Game over&quot;) # # Store a number inside a variable (lucky number) # # Get the user&#39;s favorite number and store it # # Check if the user has the same facorite number as you # luckyNumber = 7 # answer = int(input(&quot;What do you think the lucky number is?&quot;)) # if answer &gt; luckyNumber: # print(&quot;Too high!&quot;) # elif answer &lt; luckyNumber: # print(&quot;Too low!&quot;) # else: # print(&quot;Good job!&quot;) .",
            "url": "/2022/09/05/Quiz.html",
            "relUrl": "/2022/09/05/Quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Nathan's Bash Program",
            "content": ". toc: true layout: post description: wow! categories: [weeks] . title: Week 2 - HTML Fragments . echo This is now a bash program echo Nathan is handsome and hot . This is now a bash program Nathan is handsome and hot . This is verifying your python version . python --version python2 --version . And this code checks your conda packages . conda list . # packages in environment at /Users/genechang/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 fastcore 1.5.21 pypi_0 pypi fastlinkcheck 0.0.28 pypi_0 pypi filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . If you just want to check directories with &quot;Anaconda&quot; in it: do this . echo Conda Check # test for a kernel installation test=&quot;anaconda&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check # packages in environment at /Users/genechang/opt/anaconda3: anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 .",
            "url": "/2022/09/05/Bashprog.html",
            "relUrl": "/2022/09/05/Bashprog.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Lists, Dictionaries, Iteration",
            "content": ". toc: true layout: post description: Wow! categories: [weeks] . title: Week 2 - HTML Fragments . Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Gene Chang&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 2147000000.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[3], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Gene Chang &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 2147000000.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Gene Chang&#39;, &#39;age&#39;: 16, &#39;score&#39;: 2147000000.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Gene Chang &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Nathaniel&quot;, &quot;LastName&quot;: &quot;Capule&quot;, &quot;DOB&quot;: &quot;July 8&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;nathancapule13@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2008 BMW 328i&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Toby&quot;, &quot;LastName&quot;: &quot;Leeder&quot;, &quot;DOB&quot;: &quot;March 10&quot;, &quot;Residence&quot;: &quot;4s Ranch&quot;, &quot;Email&quot;: &quot;tobyzeavleeder@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Gene&quot;, &quot;LastName&quot;: &quot;Chang&quot;, &quot;DOB&quot;: &quot;February 19&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;genechang0219@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() def backwards_while_loop(): print(&quot;Backwards Time n&quot;) i = 4 while 0 &lt; i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i -= 1 return backwards_while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Nathaniel Capule Residence: Del Sur Birth Day: July 8 Cars: 2008 BMW 328i Toby Leeder Residence: 4s Ranch Birth Day: March 10 Cars: None Gene Chang Residence: Del Sur Birth Day: February 19 Cars: None Backwards Time Gene Chang Residence: Del Sur Birth Day: February 19 Cars: None Toby Leeder Residence: 4s Ranch Birth Day: March 10 Cars: None Nathaniel Capule Residence: Del Sur Birth Day: July 8 Cars: 2008 BMW 328i Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Gene Morbius Residence: San Diego Birth Day: October 21 1732 BC Cars: N, o, n, e . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Gene Morbius Residence: San Diego Birth Day: October 21 1732 BC Cars: N, o, n, e . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "/2020/01/14/test-markdown-post.html",
            "relUrl": "/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page5": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}